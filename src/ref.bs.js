// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Exn$negBase = require("./exn.bs.js");
var List$negBase = require("./list.bs.js");
var Import$negBase = require("./import.bs.js");

var t_sexp_grammar = Import$negBase.ref_sexp_grammar;

function swap(t1, t2) {
  var tmp = t1[0];
  t1[0] = t2[0];
  t2[0] = tmp;
  
}

function replace(t, f) {
  t[0] = Curry._1(f, t[0]);
  
}

function set_temporarily(t, a, f) {
  var restore_to = t[0];
  t[0] = a;
  return Exn$negBase.protect(f, (function (param) {
                t[0] = restore_to;
                
              }));
}

function set(param) {
  param._0[0] = param._1;
  
}

function sets(ts) {
  return List$negBase.iter(ts, set);
}

function snapshot(param) {
  var r = param._0;
  return /* T */{
          _0: r,
          _1: r[0]
        };
}

function snapshots(ts) {
  return List$negBase.map(ts, snapshot);
}

var And_value = {
  set: set,
  sets: sets,
  snapshot: snapshot,
  snapshots: snapshots
};

function sets_temporarily(and_values, f) {
  var restore_to = List$negBase.map(and_values, snapshot);
  List$negBase.iter(and_values, set);
  return Exn$negBase.protect(f, (function (param) {
                return List$negBase.iter(restore_to, set);
              }));
}

var compare = Import$negBase.compare_ref;

var equal = Import$negBase.equal_ref;

var t_of_sexp = Import$negBase.ref_of_sexp;

var sexp_of_t = Import$negBase.sexp_of_ref;

exports.compare = compare;
exports.equal = equal;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.t_sexp_grammar = t_sexp_grammar;
exports.swap = swap;
exports.replace = replace;
exports.set_temporarily = set_temporarily;
exports.And_value = And_value;
exports.sets_temporarily = sets_temporarily;
/* Exn-Base Not a pure module */

// Generated by Melange
'use strict';


function S_to_S2(X) {
  return {
          $great$great$eq: X.$great$great$eq,
          $great$great$pipe: X.$great$great$pipe,
          Let_syntax: X.Let_syntax,
          Monad_infix: X.Monad_infix,
          bind: X.bind,
          $$return: X.$$return,
          map: X.map,
          join: X.join,
          ignore_m: X.ignore_m,
          all: X.all,
          all_unit: X.all_unit
        };
}

function S2_to_S3(X) {
  return X;
}

function S_to_S_indexed(X) {
  return {
          $great$great$eq: X.$great$great$eq,
          $great$great$pipe: X.$great$great$pipe,
          Let_syntax: X.Let_syntax,
          Monad_infix: X.Monad_infix,
          bind: X.bind,
          $$return: X.$$return,
          map: X.map,
          join: X.join,
          ignore_m: X.ignore_m,
          all: X.all,
          all_unit: X.all_unit
        };
}

function S2_to_S(X) {
  return {
          $great$great$eq: X.$great$great$eq,
          $great$great$pipe: X.$great$great$pipe,
          Monad_infix: X.Monad_infix,
          bind: X.bind,
          $$return: X.$$return,
          map: X.map,
          join: X.join,
          ignore_m: X.ignore_m,
          all: X.all,
          all_unit: X.all_unit,
          Let_syntax: X.Let_syntax
        };
}

function S3_to_S2(X) {
  return X;
}

function S_indexed_to_S2(X) {
  return X;
}

exports.S_to_S2 = S_to_S2;
exports.S2_to_S3 = S2_to_S3;
exports.S_to_S_indexed = S_to_S_indexed;
exports.S2_to_S = S2_to_S;
exports.S3_to_S2 = S3_to_S2;
exports.S_indexed_to_S2 = S_indexed_to_S2;
/* No side effect */

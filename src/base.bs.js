// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Exn$negBase = require("./exn.bs.js");
var Int$negBase = require("./int.bs.js");
var Ref$negBase = require("./ref.bs.js");
var Bool$negBase = require("./bool.bs.js");
var Char$negBase = require("./char.bs.js");
var List$negBase = require("./list.bs.js");
var Unit$negBase = require("./unit.bs.js");
var Array$negBase = require("./array.bs.js");
var Bytes$negBase = require("./bytes.bs.js");
var Error$negBase = require("./error.bs.js");
var Float$negBase = require("./float.bs.js");
var Int32$negBase = require("./int32.bs.js");
var Int64$negBase = require("./int64.bs.js");
var Import$negBase = require("./import.bs.js");
var Option$negBase = require("./option.bs.js");
var String$negBase = require("./string.bs.js");
var Shadow_stdlib = require("shadow_stdlib/./src/shadow_stdlib.bs.js");
var Backtrace$negBase = require("./backtrace.bs.js");
var Nativeint$negBase = require("./nativeint.bs.js");
var Container_intf$negBase = require("./container_intf.bs.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");
var Sexp_with_comparable$negBase = require("./sexp_with_comparable.bs.js");

var Sexp = Sexp_with_comparable$negBase;

var Exported_for_specific_uses = {
  am_testing: Import$negBase.am_testing
};

var array_sexp_grammar = Array$negBase.t_sexp_grammar;

var hash_bool = Bool$negBase.hash;

function hash_char(x) {
  return Curry._1(Char$negBase.hash, x);
}

var hash_float = Float$negBase.hash;

var hash_int = Int$negBase.hash;

var hash_int32 = Int32$negBase.hash;

var hash_int64 = Int64$negBase.hash;

var list_sexp_grammar = List$negBase.t_sexp_grammar;

var hash_nativeint = Nativeint$negBase.hash;

var option_sexp_grammar = Option$negBase.t_sexp_grammar;

var ref_sexp_grammar = Ref$negBase.t_sexp_grammar;

function hash_string(x) {
  return Caml_external_polyfill.resolve("Base_hash_string")(x);
}

function hash_unit(x) {
  return Curry._1(Unit$negBase.hash, x);
}

var $at = List$negBase.Infix.$at;

var $plus = Int$negBase.O.$plus;

var $neg = Int$negBase.O.$neg;

var $star = Int$negBase.O.$star;

var $slash = Int$negBase.O.$slash;

var $tilde$neg = Int$negBase.O.$tilde$neg;

var $star$star = Int$negBase.O.$star$star;

var abs = Int$negBase.O.abs;

var neg = Int$negBase.O.neg;

var zero = Int$negBase.O.zero;

var $percent = Int$negBase.O.$percent;

var $slash$percent = Int$negBase.O.$slash$percent;

var $slash$slash = Int$negBase.O.$slash$slash;

var land = Int$negBase.O.land;

var lor = Int$negBase.O.lor;

var lxor = Int$negBase.O.lxor;

var lnot = Int$negBase.O.lnot;

var lsl = Int$negBase.O.lsl;

var asr = Int$negBase.O.asr;

var lsr = Int$negBase.O.lsr;

var $less = Import$negBase.Int_replace_polymorphic_compare.$less;

var $less$eq = Import$negBase.Int_replace_polymorphic_compare.$less$eq;

var $less$great = Import$negBase.Int_replace_polymorphic_compare.$less$great;

var $eq = Import$negBase.Int_replace_polymorphic_compare.$eq;

var $great = Import$negBase.Int_replace_polymorphic_compare.$great;

var $great$eq = Import$negBase.Int_replace_polymorphic_compare.$great$eq;

var compare = Import$negBase.Int_replace_polymorphic_compare.compare;

var ascending = Import$negBase.Int_replace_polymorphic_compare.ascending;

var descending = Import$negBase.Int_replace_polymorphic_compare.descending;

var equal = Import$negBase.Int_replace_polymorphic_compare.equal;

var max = Import$negBase.Int_replace_polymorphic_compare.max;

var min = Import$negBase.Int_replace_polymorphic_compare.min;

var $plus$dot = Float$negBase.O_dot.$plus$dot;

var $neg$dot = Float$negBase.O_dot.$neg$dot;

var $star$dot = Float$negBase.O_dot.$star$dot;

var $slash$dot = Float$negBase.O_dot.$slash$dot;

var $star$star$dot = Float$negBase.O_dot.$star$star$dot;

var $tilde$neg$dot = Float$negBase.O_dot.$tilde$neg$dot;

var Export = {
  compare_array: Array$negBase.compare,
  equal_array: Array$negBase.equal,
  array_of_sexp: Array$negBase.t_of_sexp,
  sexp_of_array: Array$negBase.sexp_of_t,
  array_sexp_grammar: array_sexp_grammar,
  compare_bool: Bool$negBase.compare,
  equal_bool: Bool$negBase.equal,
  hash_fold_bool: Bool$negBase.hash_fold_t,
  hash_bool: hash_bool,
  bool_of_sexp: Bool$negBase.t_of_sexp,
  sexp_of_bool: Bool$negBase.sexp_of_t,
  bool_sexp_grammar: Bool$negBase.t_sexp_grammar,
  compare_char: Char$negBase.compare,
  equal_char: Char$negBase.equal,
  hash_fold_char: Char$negBase.hash_fold_t,
  hash_char: hash_char,
  char_of_sexp: Char$negBase.t_of_sexp,
  sexp_of_char: Char$negBase.sexp_of_t,
  char_sexp_grammar: Char$negBase.t_sexp_grammar,
  sexp_of_exn: Exn$negBase.sexp_of_t,
  compare_float: Float$negBase.compare,
  equal_float: Float$negBase.equal,
  hash_fold_float: Float$negBase.hash_fold_t,
  hash_float: hash_float,
  float_of_sexp: Float$negBase.t_of_sexp,
  sexp_of_float: Float$negBase.sexp_of_t,
  float_sexp_grammar: Float$negBase.t_sexp_grammar,
  compare_int: Int$negBase.compare,
  equal_int: Int$negBase.equal,
  hash_fold_int: Int$negBase.hash_fold_t,
  hash_int: hash_int,
  int_of_sexp: Int$negBase.t_of_sexp,
  sexp_of_int: Int$negBase.sexp_of_t,
  int_sexp_grammar: Int$negBase.t_sexp_grammar,
  compare_int32: Int32$negBase.compare,
  equal_int32: Int32$negBase.equal,
  hash_fold_int32: Int32$negBase.hash_fold_t,
  hash_int32: hash_int32,
  int32_of_sexp: Int32$negBase.t_of_sexp,
  sexp_of_int32: Int32$negBase.sexp_of_t,
  int32_sexp_grammar: Int32$negBase.t_sexp_grammar,
  compare_int64: Int64$negBase.compare,
  equal_int64: Int64$negBase.equal,
  hash_fold_int64: Int64$negBase.hash_fold_t,
  hash_int64: hash_int64,
  int64_of_sexp: Int64$negBase.t_of_sexp,
  sexp_of_int64: Int64$negBase.sexp_of_t,
  int64_sexp_grammar: Int64$negBase.t_sexp_grammar,
  compare_list: List$negBase.compare,
  equal_list: List$negBase.equal,
  hash_fold_list: List$negBase.hash_fold_t,
  list_of_sexp: List$negBase.t_of_sexp,
  sexp_of_list: List$negBase.sexp_of_t,
  list_sexp_grammar: list_sexp_grammar,
  compare_nativeint: Nativeint$negBase.compare,
  equal_nativeint: Nativeint$negBase.equal,
  hash_fold_nativeint: Nativeint$negBase.hash_fold_t,
  hash_nativeint: hash_nativeint,
  nativeint_of_sexp: Nativeint$negBase.t_of_sexp,
  sexp_of_nativeint: Nativeint$negBase.sexp_of_t,
  nativeint_sexp_grammar: Nativeint$negBase.t_sexp_grammar,
  compare_option: Option$negBase.compare,
  equal_option: Option$negBase.equal,
  hash_fold_option: Option$negBase.hash_fold_t,
  option_of_sexp: Option$negBase.t_of_sexp,
  sexp_of_option: Option$negBase.sexp_of_t,
  option_sexp_grammar: option_sexp_grammar,
  compare_ref: Ref$negBase.compare,
  equal_ref: Ref$negBase.equal,
  ref_of_sexp: Ref$negBase.t_of_sexp,
  sexp_of_ref: Ref$negBase.sexp_of_t,
  ref_sexp_grammar: ref_sexp_grammar,
  compare_string: String$negBase.compare,
  equal_string: String$negBase.equal,
  hash_fold_string: String$negBase.hash_fold_t,
  hash_string: hash_string,
  string_of_sexp: String$negBase.t_of_sexp,
  sexp_of_string: String$negBase.sexp_of_t,
  string_sexp_grammar: String$negBase.t_sexp_grammar,
  compare_bytes: Bytes$negBase.compare,
  equal_bytes: Bytes$negBase.equal,
  bytes_of_sexp: Bytes$negBase.t_of_sexp,
  sexp_of_bytes: Bytes$negBase.sexp_of_t,
  bytes_sexp_grammar: Bytes$negBase.t_sexp_grammar,
  compare_unit: Unit$negBase.compare,
  equal_unit: Unit$negBase.equal,
  hash_fold_unit: Unit$negBase.hash_fold_t,
  hash_unit: hash_unit,
  unit_of_sexp: Unit$negBase.t_of_sexp,
  sexp_of_unit: Unit$negBase.sexp_of_t,
  unit_sexp_grammar: Unit$negBase.t_sexp_grammar,
  $at: $at,
  $plus: $plus,
  $neg: $neg,
  $star: $star,
  $slash: $slash,
  $tilde$neg: $tilde$neg,
  $star$star: $star$star,
  abs: abs,
  neg: neg,
  zero: zero,
  $percent: $percent,
  $slash$percent: $slash$percent,
  $slash$slash: $slash$slash,
  land: land,
  lor: lor,
  lxor: lxor,
  lnot: lnot,
  lsl: lsl,
  asr: asr,
  lsr: lsr,
  $less: $less,
  $less$eq: $less$eq,
  $less$great: $less$great,
  $eq: $eq,
  $great: $great,
  $great$eq: $great$eq,
  compare: compare,
  ascending: ascending,
  descending: descending,
  equal: equal,
  max: max,
  min: min,
  $plus$dot: $plus$dot,
  $neg$dot: $neg$dot,
  $star$dot: $star$dot,
  $slash$dot: $slash$dot,
  $star$star$dot: $star$star$dot,
  $tilde$neg$dot: $tilde$neg$dot,
  $caret: String$negBase.$caret,
  fst: Import$negBase.fst,
  snd: Import$negBase.snd,
  failwith: Import$negBase.failwith,
  invalid_arg: Import$negBase.invalid_arg,
  raise_s: Error$negBase.raise_s,
  phys_equal: Import$negBase.phys_equal
};

Backtrace$negBase.initialize_module(undefined);

var Exit = Shadow_stdlib.Exit;

var max_int = Shadow_stdlib.max_int;

var min_int = Shadow_stdlib.min_int;

var infinity = Shadow_stdlib.infinity;

var neg_infinity = Shadow_stdlib.neg_infinity;

var nan = Shadow_stdlib.nan;

var max_float = Shadow_stdlib.max_float;

var min_float = Shadow_stdlib.min_float;

var epsilon_float = Shadow_stdlib.epsilon_float;

var classify_float = Shadow_stdlib.classify_float;

var char_of_int = Shadow_stdlib.char_of_int;

var string_of_bool = Shadow_stdlib.string_of_bool;

var bool_of_string_opt = Shadow_stdlib.bool_of_string_opt;

var bool_of_string = Shadow_stdlib.bool_of_string;

var string_of_int = Shadow_stdlib.string_of_int;

var int_of_string_opt = Shadow_stdlib.int_of_string_opt;

var string_of_float = Shadow_stdlib.string_of_float;

var float_of_string_opt = Shadow_stdlib.float_of_string_opt;

var stdin = Shadow_stdlib.stdin;

var stdout = Shadow_stdlib.stdout;

var stderr = Shadow_stdlib.stderr;

var print_char = Shadow_stdlib.print_char;

var print_string = Shadow_stdlib.print_string;

var print_bytes = Shadow_stdlib.print_bytes;

var print_int = Shadow_stdlib.print_int;

var print_float = Shadow_stdlib.print_float;

var print_endline = Shadow_stdlib.print_endline;

var print_newline = Shadow_stdlib.print_newline;

var prerr_char = Shadow_stdlib.prerr_char;

var prerr_string = Shadow_stdlib.prerr_string;

var prerr_bytes = Shadow_stdlib.prerr_bytes;

var prerr_int = Shadow_stdlib.prerr_int;

var prerr_float = Shadow_stdlib.prerr_float;

var prerr_endline = Shadow_stdlib.prerr_endline;

var prerr_newline = Shadow_stdlib.prerr_newline;

var read_line = Shadow_stdlib.read_line;

var read_int_opt = Shadow_stdlib.read_int_opt;

var read_int = Shadow_stdlib.read_int;

var read_float_opt = Shadow_stdlib.read_float_opt;

var read_float = Shadow_stdlib.read_float;

var open_out = Shadow_stdlib.open_out;

var open_out_bin = Shadow_stdlib.open_out_bin;

var open_out_gen = Shadow_stdlib.open_out_gen;

var flush = Shadow_stdlib.flush;

var flush_all = Shadow_stdlib.flush_all;

var output_char = Shadow_stdlib.output_char;

var output_string = Shadow_stdlib.output_string;

var output_bytes = Shadow_stdlib.output_bytes;

var output = Shadow_stdlib.output;

var output_substring = Shadow_stdlib.output_substring;

var output_byte = Shadow_stdlib.output_byte;

var output_binary_int = Shadow_stdlib.output_binary_int;

var output_value = Shadow_stdlib.output_value;

var seek_out = Shadow_stdlib.seek_out;

var pos_out = Shadow_stdlib.pos_out;

var out_channel_length = Shadow_stdlib.out_channel_length;

var close_out = Shadow_stdlib.close_out;

var close_out_noerr = Shadow_stdlib.close_out_noerr;

var set_binary_mode_out = Shadow_stdlib.set_binary_mode_out;

var open_in = Shadow_stdlib.open_in;

var open_in_bin = Shadow_stdlib.open_in_bin;

var open_in_gen = Shadow_stdlib.open_in_gen;

var input_char = Shadow_stdlib.input_char;

var input_line = Shadow_stdlib.input_line;

var input = Shadow_stdlib.input;

var really_input = Shadow_stdlib.really_input;

var really_input_string = Shadow_stdlib.really_input_string;

var input_byte = Shadow_stdlib.input_byte;

var input_binary_int = Shadow_stdlib.input_binary_int;

var input_value = Shadow_stdlib.input_value;

var seek_in = Shadow_stdlib.seek_in;

var pos_in = Shadow_stdlib.pos_in;

var in_channel_length = Shadow_stdlib.in_channel_length;

var close_in = Shadow_stdlib.close_in;

var close_in_noerr = Shadow_stdlib.close_in_noerr;

var set_binary_mode_in = Shadow_stdlib.set_binary_mode_in;

var string_of_format = Shadow_stdlib.string_of_format;

var $caret$caret = Shadow_stdlib.$caret$caret;

var exit = Shadow_stdlib.exit;

var at_exit = Shadow_stdlib.at_exit;

var valid_float_lexem = Shadow_stdlib.valid_float_lexem;

var unsafe_really_input = Shadow_stdlib.unsafe_really_input;

var do_at_exit = Shadow_stdlib.do_at_exit;

var Not_found = Shadow_stdlib.Not_found;

var compare_array = Array$negBase.compare;

var equal_array = Array$negBase.equal;

var array_of_sexp = Array$negBase.t_of_sexp;

var sexp_of_array = Array$negBase.sexp_of_t;

var compare_bool = Bool$negBase.compare;

var equal_bool = Bool$negBase.equal;

var hash_fold_bool = Bool$negBase.hash_fold_t;

var bool_of_sexp = Bool$negBase.t_of_sexp;

var sexp_of_bool = Bool$negBase.sexp_of_t;

var bool_sexp_grammar = Bool$negBase.t_sexp_grammar;

var compare_char = Char$negBase.compare;

var equal_char = Char$negBase.equal;

var hash_fold_char = Char$negBase.hash_fold_t;

var char_of_sexp = Char$negBase.t_of_sexp;

var sexp_of_char = Char$negBase.sexp_of_t;

var char_sexp_grammar = Char$negBase.t_sexp_grammar;

var sexp_of_exn = Exn$negBase.sexp_of_t;

var compare_float = Float$negBase.compare;

var equal_float = Float$negBase.equal;

var hash_fold_float = Float$negBase.hash_fold_t;

var float_of_sexp = Float$negBase.t_of_sexp;

var sexp_of_float = Float$negBase.sexp_of_t;

var float_sexp_grammar = Float$negBase.t_sexp_grammar;

var compare_int = Int$negBase.compare;

var equal_int = Int$negBase.equal;

var hash_fold_int = Int$negBase.hash_fold_t;

var int_of_sexp = Int$negBase.t_of_sexp;

var sexp_of_int = Int$negBase.sexp_of_t;

var int_sexp_grammar = Int$negBase.t_sexp_grammar;

var compare_int32 = Int32$negBase.compare;

var equal_int32 = Int32$negBase.equal;

var hash_fold_int32 = Int32$negBase.hash_fold_t;

var int32_of_sexp = Int32$negBase.t_of_sexp;

var sexp_of_int32 = Int32$negBase.sexp_of_t;

var int32_sexp_grammar = Int32$negBase.t_sexp_grammar;

var compare_int64 = Int64$negBase.compare;

var equal_int64 = Int64$negBase.equal;

var hash_fold_int64 = Int64$negBase.hash_fold_t;

var int64_of_sexp = Int64$negBase.t_of_sexp;

var sexp_of_int64 = Int64$negBase.sexp_of_t;

var int64_sexp_grammar = Int64$negBase.t_sexp_grammar;

var compare_list = List$negBase.compare;

var equal_list = List$negBase.equal;

var hash_fold_list = List$negBase.hash_fold_t;

var list_of_sexp = List$negBase.t_of_sexp;

var sexp_of_list = List$negBase.sexp_of_t;

var compare_nativeint = Nativeint$negBase.compare;

var equal_nativeint = Nativeint$negBase.equal;

var hash_fold_nativeint = Nativeint$negBase.hash_fold_t;

var nativeint_of_sexp = Nativeint$negBase.t_of_sexp;

var sexp_of_nativeint = Nativeint$negBase.sexp_of_t;

var nativeint_sexp_grammar = Nativeint$negBase.t_sexp_grammar;

var compare_option = Option$negBase.compare;

var equal_option = Option$negBase.equal;

var hash_fold_option = Option$negBase.hash_fold_t;

var option_of_sexp = Option$negBase.t_of_sexp;

var sexp_of_option = Option$negBase.sexp_of_t;

var compare_ref = Ref$negBase.compare;

var equal_ref = Ref$negBase.equal;

var ref_of_sexp = Ref$negBase.t_of_sexp;

var sexp_of_ref = Ref$negBase.sexp_of_t;

var compare_string = String$negBase.compare;

var equal_string = String$negBase.equal;

var hash_fold_string = String$negBase.hash_fold_t;

var string_of_sexp = String$negBase.t_of_sexp;

var sexp_of_string = String$negBase.sexp_of_t;

var string_sexp_grammar = String$negBase.t_sexp_grammar;

var compare_bytes = Bytes$negBase.compare;

var equal_bytes = Bytes$negBase.equal;

var bytes_of_sexp = Bytes$negBase.t_of_sexp;

var sexp_of_bytes = Bytes$negBase.sexp_of_t;

var bytes_sexp_grammar = Bytes$negBase.t_sexp_grammar;

var compare_unit = Unit$negBase.compare;

var equal_unit = Unit$negBase.equal;

var hash_fold_unit = Unit$negBase.hash_fold_t;

var unit_of_sexp = Unit$negBase.t_of_sexp;

var sexp_of_unit = Unit$negBase.sexp_of_t;

var unit_sexp_grammar = Unit$negBase.t_sexp_grammar;

var $caret = String$negBase.$caret;

var fst = Import$negBase.fst;

var snd = Import$negBase.snd;

var failwith = Import$negBase.failwith;

var invalid_arg = Import$negBase.invalid_arg;

var raise_s = Error$negBase.raise_s;

var phys_equal = Import$negBase.phys_equal;

var Continue_or_stop = Container_intf$negBase.Export.Continue_or_stop;

var Not_found_s = Import$negBase.Not_found_s;

exports.Exit = Exit;
exports.max_int = max_int;
exports.min_int = min_int;
exports.infinity = infinity;
exports.neg_infinity = neg_infinity;
exports.nan = nan;
exports.max_float = max_float;
exports.min_float = min_float;
exports.epsilon_float = epsilon_float;
exports.classify_float = classify_float;
exports.char_of_int = char_of_int;
exports.string_of_bool = string_of_bool;
exports.bool_of_string_opt = bool_of_string_opt;
exports.bool_of_string = bool_of_string;
exports.string_of_int = string_of_int;
exports.int_of_string_opt = int_of_string_opt;
exports.string_of_float = string_of_float;
exports.float_of_string_opt = float_of_string_opt;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.print_char = print_char;
exports.print_string = print_string;
exports.print_bytes = print_bytes;
exports.print_int = print_int;
exports.print_float = print_float;
exports.print_endline = print_endline;
exports.print_newline = print_newline;
exports.prerr_char = prerr_char;
exports.prerr_string = prerr_string;
exports.prerr_bytes = prerr_bytes;
exports.prerr_int = prerr_int;
exports.prerr_float = prerr_float;
exports.prerr_endline = prerr_endline;
exports.prerr_newline = prerr_newline;
exports.read_line = read_line;
exports.read_int_opt = read_int_opt;
exports.read_int = read_int;
exports.read_float_opt = read_float_opt;
exports.read_float = read_float;
exports.open_out = open_out;
exports.open_out_bin = open_out_bin;
exports.open_out_gen = open_out_gen;
exports.flush = flush;
exports.flush_all = flush_all;
exports.output_char = output_char;
exports.output_string = output_string;
exports.output_bytes = output_bytes;
exports.output = output;
exports.output_substring = output_substring;
exports.output_byte = output_byte;
exports.output_binary_int = output_binary_int;
exports.output_value = output_value;
exports.seek_out = seek_out;
exports.pos_out = pos_out;
exports.out_channel_length = out_channel_length;
exports.close_out = close_out;
exports.close_out_noerr = close_out_noerr;
exports.set_binary_mode_out = set_binary_mode_out;
exports.open_in = open_in;
exports.open_in_bin = open_in_bin;
exports.open_in_gen = open_in_gen;
exports.input_char = input_char;
exports.input_line = input_line;
exports.input = input;
exports.really_input = really_input;
exports.really_input_string = really_input_string;
exports.input_byte = input_byte;
exports.input_binary_int = input_binary_int;
exports.input_value = input_value;
exports.seek_in = seek_in;
exports.pos_in = pos_in;
exports.in_channel_length = in_channel_length;
exports.close_in = close_in;
exports.close_in_noerr = close_in_noerr;
exports.set_binary_mode_in = set_binary_mode_in;
exports.string_of_format = string_of_format;
exports.$caret$caret = $caret$caret;
exports.exit = exit;
exports.at_exit = at_exit;
exports.valid_float_lexem = valid_float_lexem;
exports.unsafe_really_input = unsafe_really_input;
exports.do_at_exit = do_at_exit;
exports.Not_found = Not_found;
exports.Sexp = Sexp;
exports.Exported_for_specific_uses = Exported_for_specific_uses;
exports.Export = Export;
exports.compare_array = compare_array;
exports.equal_array = equal_array;
exports.array_of_sexp = array_of_sexp;
exports.sexp_of_array = sexp_of_array;
exports.array_sexp_grammar = array_sexp_grammar;
exports.compare_bool = compare_bool;
exports.equal_bool = equal_bool;
exports.hash_fold_bool = hash_fold_bool;
exports.hash_bool = hash_bool;
exports.bool_of_sexp = bool_of_sexp;
exports.sexp_of_bool = sexp_of_bool;
exports.bool_sexp_grammar = bool_sexp_grammar;
exports.compare_char = compare_char;
exports.equal_char = equal_char;
exports.hash_fold_char = hash_fold_char;
exports.hash_char = hash_char;
exports.char_of_sexp = char_of_sexp;
exports.sexp_of_char = sexp_of_char;
exports.char_sexp_grammar = char_sexp_grammar;
exports.sexp_of_exn = sexp_of_exn;
exports.compare_float = compare_float;
exports.equal_float = equal_float;
exports.hash_fold_float = hash_fold_float;
exports.hash_float = hash_float;
exports.float_of_sexp = float_of_sexp;
exports.sexp_of_float = sexp_of_float;
exports.float_sexp_grammar = float_sexp_grammar;
exports.compare_int = compare_int;
exports.equal_int = equal_int;
exports.hash_fold_int = hash_fold_int;
exports.hash_int = hash_int;
exports.int_of_sexp = int_of_sexp;
exports.sexp_of_int = sexp_of_int;
exports.int_sexp_grammar = int_sexp_grammar;
exports.compare_int32 = compare_int32;
exports.equal_int32 = equal_int32;
exports.hash_fold_int32 = hash_fold_int32;
exports.hash_int32 = hash_int32;
exports.int32_of_sexp = int32_of_sexp;
exports.sexp_of_int32 = sexp_of_int32;
exports.int32_sexp_grammar = int32_sexp_grammar;
exports.compare_int64 = compare_int64;
exports.equal_int64 = equal_int64;
exports.hash_fold_int64 = hash_fold_int64;
exports.hash_int64 = hash_int64;
exports.int64_of_sexp = int64_of_sexp;
exports.sexp_of_int64 = sexp_of_int64;
exports.int64_sexp_grammar = int64_sexp_grammar;
exports.compare_list = compare_list;
exports.equal_list = equal_list;
exports.hash_fold_list = hash_fold_list;
exports.list_of_sexp = list_of_sexp;
exports.sexp_of_list = sexp_of_list;
exports.list_sexp_grammar = list_sexp_grammar;
exports.compare_nativeint = compare_nativeint;
exports.equal_nativeint = equal_nativeint;
exports.hash_fold_nativeint = hash_fold_nativeint;
exports.hash_nativeint = hash_nativeint;
exports.nativeint_of_sexp = nativeint_of_sexp;
exports.sexp_of_nativeint = sexp_of_nativeint;
exports.nativeint_sexp_grammar = nativeint_sexp_grammar;
exports.compare_option = compare_option;
exports.equal_option = equal_option;
exports.hash_fold_option = hash_fold_option;
exports.option_of_sexp = option_of_sexp;
exports.sexp_of_option = sexp_of_option;
exports.option_sexp_grammar = option_sexp_grammar;
exports.compare_ref = compare_ref;
exports.equal_ref = equal_ref;
exports.ref_of_sexp = ref_of_sexp;
exports.sexp_of_ref = sexp_of_ref;
exports.ref_sexp_grammar = ref_sexp_grammar;
exports.compare_string = compare_string;
exports.equal_string = equal_string;
exports.hash_fold_string = hash_fold_string;
exports.hash_string = hash_string;
exports.string_of_sexp = string_of_sexp;
exports.sexp_of_string = sexp_of_string;
exports.string_sexp_grammar = string_sexp_grammar;
exports.compare_bytes = compare_bytes;
exports.equal_bytes = equal_bytes;
exports.bytes_of_sexp = bytes_of_sexp;
exports.sexp_of_bytes = sexp_of_bytes;
exports.bytes_sexp_grammar = bytes_sexp_grammar;
exports.compare_unit = compare_unit;
exports.equal_unit = equal_unit;
exports.hash_fold_unit = hash_fold_unit;
exports.hash_unit = hash_unit;
exports.unit_of_sexp = unit_of_sexp;
exports.sexp_of_unit = sexp_of_unit;
exports.unit_sexp_grammar = unit_sexp_grammar;
exports.$at = $at;
exports.$plus = $plus;
exports.$neg = $neg;
exports.$star = $star;
exports.$slash = $slash;
exports.$tilde$neg = $tilde$neg;
exports.$star$star = $star$star;
exports.abs = abs;
exports.neg = neg;
exports.zero = zero;
exports.$percent = $percent;
exports.$slash$percent = $slash$percent;
exports.$slash$slash = $slash$slash;
exports.land = land;
exports.lor = lor;
exports.lxor = lxor;
exports.lnot = lnot;
exports.lsl = lsl;
exports.asr = asr;
exports.lsr = lsr;
exports.$less = $less;
exports.$less$eq = $less$eq;
exports.$less$great = $less$great;
exports.$eq = $eq;
exports.$great = $great;
exports.$great$eq = $great$eq;
exports.compare = compare;
exports.ascending = ascending;
exports.descending = descending;
exports.equal = equal;
exports.max = max;
exports.min = min;
exports.$plus$dot = $plus$dot;
exports.$neg$dot = $neg$dot;
exports.$star$dot = $star$dot;
exports.$slash$dot = $slash$dot;
exports.$star$star$dot = $star$star$dot;
exports.$tilde$neg$dot = $tilde$neg$dot;
exports.$caret = $caret;
exports.fst = fst;
exports.snd = snd;
exports.failwith = failwith;
exports.invalid_arg = invalid_arg;
exports.raise_s = raise_s;
exports.phys_equal = phys_equal;
exports.Continue_or_stop = Continue_or_stop;
exports.Not_found_s = Not_found_s;
/*  Not a pure module */

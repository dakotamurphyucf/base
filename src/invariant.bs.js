// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Sexp$negBase = require("./sexp.bs.js");
var Error$negBase = require("./error.bs.js");
var Field$negBase = require("./field.bs.js");
var Import$negBase = require("./import.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Source_code_position0$negBase = require("./source_code_position0.bs.js");

function invariant(here, t, sexp_of_t, f) {
  try {
    return Curry._1(f, undefined);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return Error$negBase.raise_s(Sexp$negBase.message("invariant failed", {
                    hd: [
                      "",
                      Source_code_position0$negBase.sexp_of_t(here)
                    ],
                    tl: {
                      hd: [
                        "exn",
                        Import$negBase.sexp_of_exn(exn)
                      ],
                      tl: {
                        hd: [
                          "",
                          Curry._1(sexp_of_t, t)
                        ],
                        tl: /* [] */0
                      }
                    }
                  }));
  }
}

function check_field(t, f, field) {
  try {
    return Curry._1(f, Field$negBase.get(field, t));
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return Error$negBase.raise_s(Sexp$negBase.message("problem with field", {
                    hd: [
                      "field",
                      Import$negBase.sexp_of_string(Field$negBase.name(field))
                    ],
                    tl: {
                      hd: [
                        "exn",
                        Import$negBase.sexp_of_exn(exn)
                      ],
                      tl: /* [] */0
                    }
                  }));
  }
}

exports.invariant = invariant;
exports.check_field = check_field;
/* Sexp-Base Not a pure module */

// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Char$negBase = require("./char.bs.js");
var Bytes0$negBase = require("./bytes0.bs.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Import0$negBase = require("./import0.bs.js");

function tr_create_map(target, replacement) {
  var tr_map = Bytes0$negBase.create(256);
  for(var i = 0; i <= 255; ++i){
    tr_map[i] = Char$negBase.of_int_exn(i);
  }
  for(var i$1 = 0 ,i_finish = Import0$negBase.Int_replace_polymorphic_compare.min(target.length, replacement.length); i$1 < i_finish; ++i$1){
    var index = Char$negBase.to_int(target.charCodeAt(i$1));
    tr_map[index] = replacement.charCodeAt(i$1);
  }
  var last_replacement = replacement.charCodeAt(replacement.length - 1 | 0);
  for(var i$2 = Import0$negBase.Int_replace_polymorphic_compare.min(target.length, replacement.length) ,i_finish$1 = target.length; i$2 < i_finish$1; ++i$2){
    var index$1 = Char$negBase.to_int(target.charCodeAt(i$2));
    tr_map[index$1] = last_replacement;
  }
  var have_any_different = function (tr_map, _i) {
    while(true) {
      var i = _i;
      if (Import0$negBase.Int_replace_polymorphic_compare.$eq(i, 256)) {
        return false;
      }
      if (Curry._2(Char$negBase.$less$great, tr_map[i], Char$negBase.of_int_exn(i))) {
        return true;
      }
      _i = i + 1 | 0;
      continue ;
    };
  };
  var first_target = Caml_string.get(target, 0);
  if (Curry._2(Char$negBase.$less$great, tr_map[Char$negBase.to_int(first_target)], first_target) || have_any_different(tr_map, 0)) {
    return Bytes0$negBase.unsafe_to_string(tr_map);
  }
  
}

exports.tr_create_map = tr_create_map;
/* Char-Base Not a pure module */

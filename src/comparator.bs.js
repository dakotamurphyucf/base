// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function make(compare, sexp_of_t) {
  var comparator = {
    compare: compare,
    sexp_of_t: sexp_of_t
  };
  return {
          comparator: comparator
        };
}

function S_to_S1(S) {
  return S;
}

function Make1(M) {
  var comparator_compare = M.compare;
  var comparator_sexp_of_t = M.sexp_of_t;
  var comparator = {
    compare: comparator_compare,
    sexp_of_t: comparator_sexp_of_t
  };
  return {
          comparator: comparator
        };
}

var compare = Caml_obj.caml_compare;

function sexp_of_t(param) {
  return {
          TAG: /* Atom */0,
          _0: "_"
        };
}

var comparator = {
  compare: compare,
  sexp_of_t: sexp_of_t
};

var Poly = {
  comparator: comparator
};

function Derived(M) {
  var comparator = function (a) {
    return {
            compare: Curry._1(M.compare, a.compare),
            sexp_of_t: Curry._1(M.sexp_of_t, a.sexp_of_t)
          };
  };
  return {
          comparator: comparator
        };
}

function Derived2(M) {
  var comparator = function (a, b) {
    return {
            compare: Curry._2(M.compare, a.compare, b.compare),
            sexp_of_t: Curry._2(M.sexp_of_t, a.sexp_of_t, b.sexp_of_t)
          };
  };
  return {
          comparator: comparator
        };
}

function Derived_phantom(M) {
  var comparator = function (a) {
    return {
            compare: Curry._1(M.compare, a.compare),
            sexp_of_t: Curry._1(M.sexp_of_t, a.sexp_of_t)
          };
  };
  return {
          comparator: comparator
        };
}

function Make(funarg) {
  var comparator_compare = funarg.compare;
  var comparator_sexp_of_t = funarg.sexp_of_t;
  var comparator = {
    compare: comparator_compare,
    sexp_of_t: comparator_sexp_of_t
  };
  return {
          comparator: comparator
        };
}

exports.make = make;
exports.Poly = Poly;
exports.S_to_S1 = S_to_S1;
exports.Make = Make;
exports.Make1 = Make1;
exports.Derived = Derived;
exports.Derived2 = Derived2;
exports.Derived_phantom = Derived_phantom;
/* No side effect */

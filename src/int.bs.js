// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Scanf = require("bs-platform/lib/js/scanf.js");
var Int0$negBase = require("./int0.bs.js");
var Sexp$negBase = require("./sexp.bs.js");
var Sign$negBase = require("./sign.bs.js");
var Error$negBase = require("./error.bs.js");
var Float0$negBase = require("./float0.bs.js");
var Import$negBase = require("./import.bs.js");
var Printf$negBase = require("./printf.bs.js");
var Int_math$negBase = require("./int_math.bs.js");
var Or_error$negBase = require("./or_error.bs.js");
var Popcount$negBase = require("./popcount.bs.js");
var Base_int_math = require("./base_int_math");
var Comparable$negBase = require("./comparable.bs.js");
var Comparator$negBase = require("./comparator.bs.js");
var Pretty_printer$negBase = require("./pretty_printer.bs.js");
var Int_conversions$negBase = require("./int_conversions.bs.js");

var hash = Import$negBase.hash_int;

var hashable = {
  hash: hash,
  compare: Import$negBase.compare,
  sexp_of_t: Import$negBase.sexp_of_int
};

function compare(x, y) {
  return Curry._2(Import$negBase.Int_replace_polymorphic_compare.compare, x, y);
}

function of_string(s) {
  try {
    return Int0$negBase.of_string(s);
  }
  catch (exn){
    return Curry._2(Printf$negBase.failwithf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Int.of_string: ",
                      _1: {
                        TAG: /* Caml_string */3,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "Int.of_string: %S"
                  }), s, undefined);
  }
}

var float_lower_bound = Float0$negBase.lower_bound_for_int(Int_conversions$negBase.num_bits_int);

var float_upper_bound = Float0$negBase.upper_bound_for_int(Int_conversions$negBase.num_bits_int);

function to_float(prim) {
  return prim;
}

function of_float_unchecked(prim) {
  return prim | 0;
}

function of_float(f) {
  if (Curry._2(Import$negBase.Float_replace_polymorphic_compare.$great$eq, f, float_lower_bound) && Curry._2(Import$negBase.Float_replace_polymorphic_compare.$less$eq, f, float_upper_bound)) {
    return f | 0;
  } else {
    return Curry._2(Printf$negBase.invalid_argf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Int.of_float: argument (",
                      _1: {
                        TAG: /* Float */8,
                        _0: [
                          /* Float_flag_ */0,
                          /* Float_f */0
                        ],
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: {
                          TAG: /* String_literal */11,
                          _0: ") is out of range or NaN",
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "Int.of_float: argument (%f) is out of range or NaN"
                  }), Float0$negBase.box(f), undefined);
  }
}

var include = Comparator$negBase.Make({
      compare: compare,
      sexp_of_t: Import$negBase.sexp_of_int
    });

var include$1 = Comparable$negBase.With_zero({
      compare: compare,
      sexp_of_t: Import$negBase.sexp_of_int,
      zero: 0
    });

var include$2 = Int_conversions$negBase.Make(Int0$negBase);

var hash$1 = Import$negBase.hash_int;

var $less = Import$negBase.Int_replace_polymorphic_compare.$less;

function to_string(i) {
  return Curry._1(Printf$negBase.sprintf(/* Format */{
                  _0: {
                    TAG: /* Int */4,
                    _0: /* Int_x */6,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: /* End_of_format */0
                  },
                  _1: "%x"
                }), i);
}

function of_string$1(s) {
  return Curry._1(Scanf.sscanf(s, /* Format */{
                  _0: {
                    TAG: /* Int */4,
                    _0: /* Int_x */6,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: /* End_of_format */0
                  },
                  _1: "%x"
                }), (function (prim) {
                return prim;
              }));
}

var include$3 = Int_conversions$negBase.Make_hex({
      compare: Import$negBase.compare_int,
      hash_fold_t: Import$negBase.hash_fold_int,
      hash: hash$1,
      to_string: to_string,
      of_string: of_string$1,
      zero: 0,
      $less: $less,
      neg: Import$negBase.$tilde$neg,
      module_name: "Base.Int.Hex"
    });

var include$4 = Pretty_printer$negBase.Register({
      module_name: "Base.Int",
      to_string: Int0$negBase.to_string
    });

function invariant(param) {
  
}

function between(t, low, high) {
  if (Curry._2(Import$negBase.Int_replace_polymorphic_compare.$less$eq, low, t)) {
    return Curry._2(Import$negBase.Int_replace_polymorphic_compare.$less$eq, t, high);
  } else {
    return false;
  }
}

function clamp_unchecked(t, min, max) {
  if (Curry._2(Import$negBase.Int_replace_polymorphic_compare.$less, t, min)) {
    return min;
  } else if (Curry._2(Import$negBase.Int_replace_polymorphic_compare.$less$eq, t, max)) {
    return t;
  } else {
    return max;
  }
}

function clamp_exn(t, min, max) {
  if (!Curry._2(Import$negBase.Int_replace_polymorphic_compare.$less$eq, min, max)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "int.ml",
            109,
            2
          ],
          Error: new Error()
        };
  }
  return clamp_unchecked(t, min, max);
}

function clamp(t, min, max) {
  if (Curry._2(Import$negBase.Int_replace_polymorphic_compare.$great, min, max)) {
    return Or_error$negBase.error_s(Sexp$negBase.message("clamp requires [min <= max]", {
                    hd: [
                      "min",
                      Import$negBase.sexp_of_int(min)
                    ],
                    tl: {
                      hd: [
                        "max",
                        Import$negBase.sexp_of_int(max)
                      ],
                      tl: /* [] */0
                    }
                  }));
  } else {
    return {
            TAG: /* Ok */0,
            _0: clamp_unchecked(t, min, max)
          };
  }
}

function pred(i) {
  return Import$negBase.$neg(i, 1);
}

function succ(i) {
  return Import$negBase.$plus(i, 1);
}

function to_int(i) {
  return i;
}

function of_int(i) {
  return i;
}

var max_value = Import$negBase.Caml.max_int;

var min_value = Import$negBase.Caml.min_int;

var abs = Import$negBase.abs;

var $plus = Import$negBase.$plus;

var $neg = Import$negBase.$neg;

var $star = Import$negBase.$star;

var $slash = Import$negBase.$slash;

var neg = Import$negBase.$tilde$neg;

var rem = Import$negBase.mod;

var shift_right = Import$negBase.asr;

var shift_right_logical = Import$negBase.lsr;

var shift_left = Import$negBase.lsl;

var bit_not = Import$negBase.lnot;

var bit_or = Import$negBase.lor;

var bit_and = Import$negBase.land;

var bit_xor = Import$negBase.lxor;

var pow = Int_math$negBase.Private.int_pow;

var $star$star = pow;

function non_positive_argument(param) {
  return Curry._1(Printf$negBase.invalid_argf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "argument must be strictly positive",
                    _1: /* End_of_format */0
                  },
                  _1: "argument must be strictly positive"
                }), undefined);
}

function ceil_pow2(x) {
  if (Import$negBase.$less$eq(x, 0)) {
    non_positive_argument(undefined);
  }
  var x$1 = Import$negBase.$neg(x, 1);
  var x$2 = Import$negBase.lor(x$1, Import$negBase.lsr(x$1, 1));
  var x$3 = Import$negBase.lor(x$2, Import$negBase.lsr(x$2, 2));
  var x$4 = Import$negBase.lor(x$3, Import$negBase.lsr(x$3, 4));
  var x$5 = Import$negBase.lor(x$4, Import$negBase.lsr(x$4, 8));
  var x$6 = Import$negBase.lor(x$5, Import$negBase.lsr(x$5, 16));
  var x$7 = Import$negBase.lor(x$6, Import$negBase.lsr(x$6, 32));
  return Import$negBase.$plus(x$7, 1);
}

function floor_pow2(x) {
  if (Import$negBase.$less$eq(x, 0)) {
    non_positive_argument(undefined);
  }
  var x$1 = Import$negBase.lor(x, Import$negBase.lsr(x, 1));
  var x$2 = Import$negBase.lor(x$1, Import$negBase.lsr(x$1, 2));
  var x$3 = Import$negBase.lor(x$2, Import$negBase.lsr(x$2, 4));
  var x$4 = Import$negBase.lor(x$3, Import$negBase.lsr(x$3, 8));
  var x$5 = Import$negBase.lor(x$4, Import$negBase.lsr(x$4, 16));
  var x$6 = Import$negBase.lor(x$5, Import$negBase.lsr(x$5, 32));
  return Import$negBase.$neg(x$6, Import$negBase.lsr(x$6, 1));
}

function is_pow2(x) {
  if (Import$negBase.$less$eq(x, 0)) {
    non_positive_argument(undefined);
  }
  return Import$negBase.land(x, Import$negBase.$neg(x, 1)) === 0;
}

function clz(prim) {
  return Base_int_math.Base_int_math_int_clz(prim);
}

function ctz(prim) {
  return Base_int_math.Base_int_math_int_ctz(prim);
}

function floor_log2(i) {
  if (Import$negBase.$less$eq(i, 0)) {
    Error$negBase.raise_s(Sexp$negBase.message("[Int.floor_log2] got invalid input", {
              hd: [
                "",
                Import$negBase.sexp_of_int(i)
              ],
              tl: /* [] */0
            }));
  }
  return Import$negBase.$neg(Import$negBase.$neg(Int_conversions$negBase.num_bits_int, 1), Base_int_math.Base_int_math_int_clz(i));
}

function ceil_log2(i) {
  if (Import$negBase.$less$eq(i, 0)) {
    Error$negBase.raise_s(Sexp$negBase.message("[Int.ceil_log2] got invalid input", {
              hd: [
                "",
                Import$negBase.sexp_of_int(i)
              ],
              tl: /* [] */0
            }));
  }
  if (i === 1) {
    return 0;
  } else {
    return Import$negBase.$neg(Int_conversions$negBase.num_bits_int, Base_int_math.Base_int_math_int_clz(Import$negBase.$neg(i, 1)));
  }
}

var $great$eq = Import$negBase.Int_replace_polymorphic_compare.$great$eq;

var $less$eq = Import$negBase.Int_replace_polymorphic_compare.$less$eq;

var $eq = Import$negBase.Int_replace_polymorphic_compare.$eq;

var $great = Import$negBase.Int_replace_polymorphic_compare.$great;

var $less$1 = Import$negBase.Int_replace_polymorphic_compare.$less;

var $less$great = Import$negBase.Int_replace_polymorphic_compare.$less$great;

var F = Int_math$negBase.Make({
      of_float: of_float,
      to_float: to_float,
      of_string: of_string,
      to_string: Int0$negBase.to_string,
      $plus: $plus,
      $neg: $neg,
      $star: $star,
      $slash: $slash,
      $tilde$neg: neg,
      $great$eq: $great$eq,
      $less$eq: $less$eq,
      $eq: $eq,
      $great: $great,
      $less: $less$1,
      $less$great: $less$great,
      abs: abs,
      neg: neg,
      zero: 0,
      of_int_exn: of_int,
      rem: rem
    });

function $percent(x, y) {
  if (Curry._2($less$eq, y, 0)) {
    Curry._3(Printf$negBase.invalid_argf(/* Format */{
              _0: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: {
                  TAG: /* Char_literal */12,
                  _0: /* ' ' */32,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* '%' */37,
                    _1: {
                      TAG: /* Char_literal */12,
                      _0: /* ' ' */32,
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " in core_int.ml: modulus should be positive",
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  }
                }
              },
              _1: "%s %% %s in core_int.ml: modulus should be positive"
            }), Int0$negBase.to_string(x), Int0$negBase.to_string(y), undefined);
  }
  var rval = Import$negBase.mod(x, y);
  if (Curry._2($less$1, rval, 0)) {
    return Import$negBase.$plus(rval, y);
  } else {
    return rval;
  }
}

function $slash$percent(x, y) {
  if (Curry._2($less$eq, y, 0)) {
    Curry._3(Printf$negBase.invalid_argf(/* Format */{
              _0: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: {
                  TAG: /* String_literal */11,
                  _0: " /",
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* '%' */37,
                    _1: {
                      TAG: /* Char_literal */12,
                      _0: /* ' ' */32,
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " in core_int.ml: divisor should be positive",
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  }
                }
              },
              _1: "%s /%% %s in core_int.ml: divisor should be positive"
            }), Int0$negBase.to_string(x), Int0$negBase.to_string(y), undefined);
  }
  if (Curry._2($less$1, x, 0)) {
    return Import$negBase.$neg(Import$negBase.$slash(Import$negBase.$plus(x, 1), y), 1);
  } else {
    return Import$negBase.$slash(x, y);
  }
}

var $slash$slash = Import$negBase.$slash$dot;

var t_sexp_grammar = Import$negBase.int_sexp_grammar;

var of_int_exn = of_int;

var to_int_exn = to_int;

var hash_fold_t = Import$negBase.hash_fold_int;

var t_of_sexp = Import$negBase.int_of_sexp;

var sexp_of_t = include$2.sexp_of_t;

var to_string$1 = Int0$negBase.to_string;

var $great$eq$1 = Import$negBase.Int_replace_polymorphic_compare.$great$eq;

var $less$eq$1 = Import$negBase.Int_replace_polymorphic_compare.$less$eq;

var $eq$1 = Import$negBase.Int_replace_polymorphic_compare.$eq;

var $great$1 = Import$negBase.Int_replace_polymorphic_compare.$great;

var $less$2 = Import$negBase.Int_replace_polymorphic_compare.$less;

var $less$great$1 = Import$negBase.Int_replace_polymorphic_compare.$less$great;

var equal = Import$negBase.Int_replace_polymorphic_compare.equal;

var compare$1 = Import$negBase.Int_replace_polymorphic_compare.compare;

var min = Import$negBase.Int_replace_polymorphic_compare.min;

var max = Import$negBase.Int_replace_polymorphic_compare.max;

var ascending = Import$negBase.Int_replace_polymorphic_compare.ascending;

var descending = Import$negBase.Int_replace_polymorphic_compare.descending;

var comparator = include.comparator;

var pp = include$4.pp;

var is_positive = include$1.is_positive;

var is_non_negative = include$1.is_non_negative;

var is_negative = include$1.is_negative;

var is_non_positive = include$1.is_non_positive;

var sign = Sign$negBase.of_int;

var Hex = include$3.Hex;

var to_string_hum = include$2.to_string_hum;

var zero = 0;

var one = 1;

var minus_one = -1;

var $tilde$neg = neg;

var land = Import$negBase.land;

var lor = Import$negBase.lor;

var lxor = Import$negBase.lxor;

var lnot = Import$negBase.lnot;

var lsl = Import$negBase.lsl;

var asr = Import$negBase.asr;

var round = F.round;

var round_towards_zero = F.round_towards_zero;

var round_down = F.round_down;

var round_up = F.round_up;

var round_nearest = F.round_nearest;

var popcount = Popcount$negBase.int_popcount;

var decr = Import$negBase.decr;

var incr = Import$negBase.incr;

var of_int32_exn = Int_conversions$negBase.int32_to_int_exn;

var to_int32_exn = Int_conversions$negBase.int_to_int32_exn;

var of_int64_exn = Int_conversions$negBase.int64_to_int_exn;

var to_int64 = Int_conversions$negBase.int_to_int64;

var of_nativeint_exn = Int_conversions$negBase.nativeint_to_int_exn;

var to_nativeint_exn = Int_conversions$negBase.int_to_nativeint;

var num_bits = Int_conversions$negBase.num_bits_int;

var lsr = Import$negBase.lsr;

var O = {
  $plus: $plus,
  $neg: $neg,
  $star: $star,
  $slash: $slash,
  $tilde$neg: neg,
  $star$star: $star$star,
  $great$eq: $great$eq,
  $less$eq: $less$eq,
  $eq: $eq,
  $great: $great,
  $less: $less$1,
  $less$great: $less$great,
  abs: abs,
  neg: neg,
  zero: 0,
  $percent: $percent,
  $slash$percent: $slash$percent,
  $slash$slash: $slash$slash,
  land: Import$negBase.land,
  lor: Import$negBase.lor,
  lxor: Import$negBase.lxor,
  lnot: Import$negBase.lnot,
  lsl: Import$negBase.lsl,
  asr: Import$negBase.asr,
  lsr: Import$negBase.lsr
};

var max_value_30_bits = 1073741823;

var of_int32 = Int_conversions$negBase.int32_to_int;

var to_int32 = Int_conversions$negBase.int_to_int32;

var of_int64 = Int_conversions$negBase.int64_to_int;

var of_nativeint = Int_conversions$negBase.nativeint_to_int;

var to_nativeint = Int_conversions$negBase.int_to_nativeint;

var of_int32_trunc = Int_conversions$negBase.int32_to_int_trunc;

var to_int32_trunc = Int_conversions$negBase.int_to_int32_trunc;

var of_int64_trunc = Int_conversions$negBase.int64_to_int_trunc;

var of_nativeint_trunc = Int_conversions$negBase.nativeint_to_int_trunc;

var Private = {
  O_F: F
};

exports.t_sexp_grammar = t_sexp_grammar;
exports.of_float = of_float;
exports.to_float = to_float;
exports.of_int_exn = of_int_exn;
exports.to_int_exn = to_int_exn;
exports.hash_fold_t = hash_fold_t;
exports.hash = hash;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.of_string = of_string;
exports.to_string = to_string$1;
exports.$great$eq = $great$eq$1;
exports.$less$eq = $less$eq$1;
exports.$eq = $eq$1;
exports.$great = $great$1;
exports.$less = $less$2;
exports.$less$great = $less$great$1;
exports.equal = equal;
exports.compare = compare$1;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.pp = pp;
exports.hashable = hashable;
exports.is_positive = is_positive;
exports.is_non_negative = is_non_negative;
exports.is_negative = is_negative;
exports.is_non_positive = is_non_positive;
exports.sign = sign;
exports.invariant = invariant;
exports.Hex = Hex;
exports.to_string_hum = to_string_hum;
exports.zero = zero;
exports.one = one;
exports.minus_one = minus_one;
exports.$plus = $plus;
exports.$neg = $neg;
exports.$star = $star;
exports.$star$star = $star$star;
exports.neg = neg;
exports.$tilde$neg = $tilde$neg;
exports.$slash$percent = $slash$percent;
exports.$percent = $percent;
exports.$slash = $slash;
exports.rem = rem;
exports.$slash$slash = $slash$slash;
exports.land = land;
exports.lor = lor;
exports.lxor = lxor;
exports.lnot = lnot;
exports.lsl = lsl;
exports.asr = asr;
exports.round = round;
exports.round_towards_zero = round_towards_zero;
exports.round_down = round_down;
exports.round_up = round_up;
exports.round_nearest = round_nearest;
exports.abs = abs;
exports.succ = succ;
exports.pred = pred;
exports.pow = pow;
exports.bit_and = bit_and;
exports.bit_or = bit_or;
exports.bit_xor = bit_xor;
exports.bit_not = bit_not;
exports.popcount = popcount;
exports.shift_left = shift_left;
exports.shift_right = shift_right;
exports.decr = decr;
exports.incr = incr;
exports.of_int32_exn = of_int32_exn;
exports.to_int32_exn = to_int32_exn;
exports.of_int64_exn = of_int64_exn;
exports.to_int64 = to_int64;
exports.of_nativeint_exn = of_nativeint_exn;
exports.to_nativeint_exn = to_nativeint_exn;
exports.of_float_unchecked = of_float_unchecked;
exports.num_bits = num_bits;
exports.max_value = max_value;
exports.min_value = min_value;
exports.lsr = lsr;
exports.shift_right_logical = shift_right_logical;
exports.ceil_pow2 = ceil_pow2;
exports.floor_pow2 = floor_pow2;
exports.ceil_log2 = ceil_log2;
exports.floor_log2 = floor_log2;
exports.is_pow2 = is_pow2;
exports.clz = clz;
exports.ctz = ctz;
exports.O = O;
exports.max_value_30_bits = max_value_30_bits;
exports.of_int = of_int;
exports.to_int = to_int;
exports.of_int32 = of_int32;
exports.to_int32 = to_int32;
exports.of_int64 = of_int64;
exports.of_nativeint = of_nativeint;
exports.to_nativeint = to_nativeint;
exports.of_int32_trunc = of_int32_trunc;
exports.to_int32_trunc = to_int32_trunc;
exports.of_int64_trunc = of_int64_trunc;
exports.of_nativeint_trunc = of_nativeint_trunc;
exports.Private = Private;
/* float_lower_bound Not a pure module */

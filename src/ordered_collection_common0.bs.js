// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Import$negBase = require("./import.bs.js");
var Printf$negBase = require("./printf.bs.js");

function slow_check_pos_len_exn(pos, len, total_length) {
  if (Import$negBase.$less(pos, 0)) {
    Curry._2(Printf$negBase.invalid_argf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "Negative position: ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: /* End_of_format */0
                }
              },
              _1: "Negative position: %d"
            }), pos, undefined);
  }
  if (Import$negBase.$less(len, 0)) {
    Curry._2(Printf$negBase.invalid_argf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "Negative length: ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: /* End_of_format */0
                }
              },
              _1: "Negative length: %d"
            }), len, undefined);
  }
  if (Import$negBase.$great(pos, Import$negBase.$neg(total_length, len))) {
    return Curry._4(Printf$negBase.invalid_argf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "pos + len past end: ",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_d */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: {
                          TAG: /* String_literal */11,
                          _0: " + ",
                          _1: {
                            TAG: /* Int */4,
                            _0: /* Int_d */0,
                            _1: /* No_padding */0,
                            _2: /* No_precision */0,
                            _3: {
                              TAG: /* String_literal */11,
                              _0: " > ",
                              _1: {
                                TAG: /* Int */4,
                                _0: /* Int_d */0,
                                _1: /* No_padding */0,
                                _2: /* No_precision */0,
                                _3: /* End_of_format */0
                              }
                            }
                          }
                        }
                      }
                    },
                    _1: "pos + len past end: %d + %d > %d"
                  }), pos, len, total_length, undefined);
  }
  
}

function check_pos_len_exn(pos, len, total_length) {
  var stop = Import$negBase.$plus(pos, len);
  if (Import$negBase.$less(Import$negBase.lor(Import$negBase.lor(Import$negBase.lor(pos, len), stop), Import$negBase.$neg(total_length, stop)), 0)) {
    return slow_check_pos_len_exn(pos, len, total_length);
  }
  
}

function get_pos_len_exn(posOpt, len, param, total_length) {
  var pos = posOpt !== undefined ? posOpt : 0;
  var len$1 = len !== undefined ? len : Import$negBase.$neg(total_length, pos);
  check_pos_len_exn(pos, len$1, total_length);
  return [
          pos,
          len$1
        ];
}

var Private = {
  slow_check_pos_len_exn: slow_check_pos_len_exn
};

exports.get_pos_len_exn = get_pos_len_exn;
exports.check_pos_len_exn = check_pos_len_exn;
exports.Private = Private;
/* Import-Base Not a pure module */

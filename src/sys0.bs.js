// Generated by Melange
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Printf$negBase = require("./printf.bs.js");
var Import0$negBase = require("./import0.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");

function runtime_variant(prim) {
  return Caml_external_polyfill.resolve("caml_runtime_variant")(prim);
}

function runtime_parameters(prim) {
  return Caml_external_polyfill.resolve("caml_runtime_parameters")(prim);
}

var argv = Caml_sys.caml_sys_argv(0);

function get_argv(param) {
  return Caml_sys.caml_sys_argv(0);
}

function getenv_exn($$var) {
  try {
    return Caml_sys.caml_sys_getenv($$var);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Import0$negBase.Caml.Not_found) {
      return Curry._2(Printf$negBase.failwithf(/* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "Sys.getenv_exn: environment variable ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: " is not set",
                            _1: /* End_of_format */0
                          }
                        }
                      },
                      _1: "Sys.getenv_exn: environment variable %s is not set"
                    }), $$var, undefined);
    }
    throw exn;
  }
}

function getenv($$var) {
  var x;
  try {
    x = Caml_sys.caml_sys_getenv($$var);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Import0$negBase.Caml.Not_found) {
      return ;
    }
    throw exn;
  }
  return x;
}

var backend_type = Sys.backend_type;

var interactive = Sys.interactive;

var os_type = Sys.os_type;

var unix = Sys.unix;

var win32 = Sys.win32;

var cygwin = false;

var word_size_in_bits = Sys.word_size;

var int_size_in_bits = Sys.int_size;

var big_endian = Sys.big_endian;

var max_string_length = Sys.max_string_length;

var max_array_length = Sys.max_array_length;

var ocaml_version = Sys.ocaml_version;

var enable_runtime_warnings = Sys.enable_runtime_warnings;

var runtime_warnings_enabled = Sys.runtime_warnings_enabled;

var Break = Sys.Break;

exports.backend_type = backend_type;
exports.interactive = interactive;
exports.os_type = os_type;
exports.unix = unix;
exports.win32 = win32;
exports.cygwin = cygwin;
exports.word_size_in_bits = word_size_in_bits;
exports.int_size_in_bits = int_size_in_bits;
exports.big_endian = big_endian;
exports.max_string_length = max_string_length;
exports.max_array_length = max_array_length;
exports.runtime_variant = runtime_variant;
exports.runtime_parameters = runtime_parameters;
exports.argv = argv;
exports.get_argv = get_argv;
exports.ocaml_version = ocaml_version;
exports.enable_runtime_warnings = enable_runtime_warnings;
exports.runtime_warnings_enabled = runtime_warnings_enabled;
exports.getenv_exn = getenv_exn;
exports.getenv = getenv;
exports.Break = Break;
/* Printf-Base Not a pure module */

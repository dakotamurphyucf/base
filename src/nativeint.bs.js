// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Scanf = require("bs-platform/lib/js/scanf.js");
var Nativeint = require("bs-platform/lib/js/nativeint.js");
var Sexp$negBase = require("./sexp.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Error$negBase = require("./error.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Float0$negBase = require("./float0.bs.js");
var Import$negBase = require("./import.bs.js");
var Printf$negBase = require("./printf.bs.js");
var Int_math$negBase = require("./int_math.bs.js");
var Or_error$negBase = require("./or_error.bs.js");
var Popcount$negBase = require("./popcount.bs.js");
var Word_size$negBase = require("./word_size.bs.js");
var Comparable$negBase = require("./comparable.bs.js");
var Comparator$negBase = require("./comparator.bs.js");
var Pretty_printer$negBase = require("./pretty_printer.bs.js");
var Int_conversions$negBase = require("./int_conversions.bs.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");

var hash = Import$negBase.hash_nativeint;

var hashable_compare = Import$negBase.Nativeint_replace_polymorphic_compare.compare;

var hashable = {
  hash: hash,
  compare: hashable_compare,
  sexp_of_t: Import$negBase.sexp_of_nativeint
};

var compare = Import$negBase.Nativeint_replace_polymorphic_compare.compare;

var of_string = Caml_format.caml_nativeint_of_string;

var include = Comparator$negBase.Make({
      compare: compare,
      sexp_of_t: Import$negBase.sexp_of_nativeint
    });

var include$1 = Comparable$negBase.With_zero({
      compare: compare,
      sexp_of_t: Import$negBase.sexp_of_nativeint,
      zero: Nativeint.zero
    });

var include$2 = Int_conversions$negBase.Make({
      to_string: Nativeint.to_string
    });

var hash$1 = Import$negBase.hash_nativeint;

function neg(prim) {
  return -prim | 0;
}

var $less = Import$negBase.Nativeint_replace_polymorphic_compare.$less;

function to_string(i) {
  return Curry._1(Printf$negBase.sprintf(/* Format */{
                  _0: {
                    TAG: /* Nativeint */6,
                    _0: /* Int_x */6,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: /* End_of_format */0
                  },
                  _1: "%nx"
                }), i);
}

function of_string$1(s) {
  return Curry._1(Scanf.sscanf(s, /* Format */{
                  _0: {
                    TAG: /* Nativeint */6,
                    _0: /* Int_x */6,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: /* End_of_format */0
                  },
                  _1: "%nx"
                }), (function (prim) {
                return prim;
              }));
}

var include$3 = Int_conversions$negBase.Make_hex({
      compare: Import$negBase.compare_nativeint,
      hash_fold_t: Import$negBase.hash_fold_nativeint,
      hash: hash$1,
      to_string: to_string,
      of_string: of_string$1,
      zero: Nativeint.zero,
      $less: $less,
      neg: neg,
      module_name: "Base.Nativeint.Hex"
    });

var include$4 = Pretty_printer$negBase.Register({
      module_name: "Base.Nativeint",
      to_string: Nativeint.to_string
    });

function invariant(param) {
  
}

var num_bits = Word_size$negBase.num_bits(Word_size$negBase.word_size);

var float_lower_bound = Float0$negBase.lower_bound_for_int(num_bits);

var float_upper_bound = Float0$negBase.upper_bound_for_int(num_bits);

function shift_right_logical(prim, prim$1) {
  return (prim >>> prim$1) | 0;
}

function shift_right(prim, prim$1) {
  return (prim >> prim$1);
}

function shift_left(prim, prim$1) {
  return (prim << prim$1);
}

function bit_xor(prim, prim$1) {
  return prim ^ prim$1;
}

function bit_or(prim, prim$1) {
  return prim | prim$1;
}

function bit_and(prim, prim$1) {
  return prim & prim$1;
}

var rem = Caml_int32.mod_;

function neg$1(prim) {
  return -prim | 0;
}

function to_float(prim) {
  return Caml_external_polyfill.resolve("caml_nativeint_to_float")(prim);
}

function of_float_unchecked(prim) {
  return Caml_external_polyfill.resolve("caml_nativeint_of_float")(prim);
}

function of_float(f) {
  if (Curry._2(Import$negBase.Float_replace_polymorphic_compare.$great$eq, f, float_lower_bound) && Curry._2(Import$negBase.Float_replace_polymorphic_compare.$less$eq, f, float_upper_bound)) {
    return Caml_external_polyfill.resolve("caml_nativeint_of_float")(f);
  } else {
    return Curry._2(Printf$negBase.invalid_argf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Nativeint.of_float: argument (",
                      _1: {
                        TAG: /* Float */8,
                        _0: [
                          /* Float_flag_ */0,
                          /* Float_f */0
                        ],
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: {
                          TAG: /* String_literal */11,
                          _0: ") is out of range or NaN",
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "Nativeint.of_float: argument (%f) is out of range or NaN"
                  }), Float0$negBase.box(f), undefined);
  }
}

function non_positive_argument(param) {
  return Curry._1(Printf$negBase.invalid_argf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "argument must be strictly positive",
                    _1: /* End_of_format */0
                  },
                  _1: "argument must be strictly positive"
                }), undefined);
}

function ceil_pow2(x) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, x, 0)) {
    non_positive_argument(undefined);
  }
  var x$1 = Nativeint.pred(x);
  var x$2 = x$1 | (x$1 >>> 1);
  var x$3 = x$2 | (x$2 >>> 2);
  var x$4 = x$3 | (x$3 >>> 4);
  var x$5 = x$4 | (x$4 >>> 8);
  var x$6 = x$5 | (x$5 >>> 16);
  return Nativeint.succ(x$6 | (x$6 >>> 32));
}

function floor_pow2(x) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, x, 0)) {
    non_positive_argument(undefined);
  }
  var x$1 = x | (x >>> 1);
  var x$2 = x$1 | (x$1 >>> 2);
  var x$3 = x$2 | (x$2 >>> 4);
  var x$4 = x$3 | (x$3 >>> 8);
  var x$5 = x$4 | (x$4 >>> 16);
  var x$6 = x$5 | (x$5 >>> 32);
  return x$6 - (x$6 >>> 1) | 0;
}

function is_pow2(x) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, x, 0)) {
    non_positive_argument(undefined);
  }
  return Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$eq, x & Nativeint.pred(x), 0);
}

function floor_log2(i) {
  if (i <= Nativeint.zero) {
    Error$negBase.raise_s(Sexp$negBase.message("[Nativeint.floor_log2] got invalid input", {
              hd: [
                "",
                Import$negBase.sexp_of_nativeint(i)
              ],
              tl: /* [] */0
            }));
  }
  return Import$negBase.$neg(Import$negBase.$neg(num_bits, 1), Caml_external_polyfill.resolve("Base_int_math_nativeint_clz")(i));
}

function ceil_log2(i) {
  if (i <= Nativeint.zero) {
    Error$negBase.raise_s(Sexp$negBase.message("[Nativeint.ceil_log2] got invalid input", {
              hd: [
                "",
                Import$negBase.sexp_of_nativeint(i)
              ],
              tl: /* [] */0
            }));
  }
  if (Nativeint.equal(i, Nativeint.one)) {
    return 0;
  } else {
    return Import$negBase.$neg(num_bits, Caml_external_polyfill.resolve("Base_int_math_nativeint_clz")(Nativeint.pred(i)));
  }
}

function between(t, low, high) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, low, t)) {
    return Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, t, high);
  } else {
    return false;
  }
}

function clamp_unchecked(t, min, max) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less, t, min)) {
    return min;
  } else if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, t, max)) {
    return t;
  } else {
    return max;
  }
}

function clamp_exn(t, min, max) {
  if (!Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq, min, max)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "nativeint.ml",
            204,
            2
          ],
          Error: new Error()
        };
  }
  return clamp_unchecked(t, min, max);
}

function clamp(t, min, max) {
  if (Curry._2(Import$negBase.Nativeint_replace_polymorphic_compare.$great, min, max)) {
    return Or_error$negBase.error_s(Sexp$negBase.message("clamp requires [min <= max]", {
                    hd: [
                      "min",
                      Import$negBase.sexp_of_nativeint(min)
                    ],
                    tl: {
                      hd: [
                        "max",
                        Import$negBase.sexp_of_nativeint(max)
                      ],
                      tl: /* [] */0
                    }
                  }));
  } else {
    return {
            TAG: /* Ok */0,
            _0: clamp_unchecked(t, min, max)
          };
  }
}

var $slash = Caml_int32.div;

function $star(prim, prim$1) {
  return Math.imul(prim, prim$1);
}

function $neg(prim, prim$1) {
  return prim - prim$1 | 0;
}

function $plus(prim, prim$1) {
  return prim + prim$1 | 0;
}

function incr(r) {
  r[0] = r[0] + Nativeint.one | 0;
  
}

function decr(r) {
  r[0] = r[0] - Nativeint.one | 0;
  
}

function of_nativeint(t) {
  return t;
}

function to_nativeint(t) {
  return t;
}

function pow(b, e) {
  return Int_conversions$negBase.int_to_nativeint(Int_math$negBase.Private.int_pow(Int_conversions$negBase.nativeint_to_int_exn(b), Int_conversions$negBase.nativeint_to_int_exn(e)));
}

var $star$star = pow;

var $great$eq = Import$negBase.Nativeint_replace_polymorphic_compare.$great$eq;

var $less$eq = Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq;

var $eq = Import$negBase.Nativeint_replace_polymorphic_compare.$eq;

var $great = Import$negBase.Nativeint_replace_polymorphic_compare.$great;

var $less$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$less;

var $less$great = Import$negBase.Nativeint_replace_polymorphic_compare.$less$great;

var include$5 = Int_math$negBase.Make({
      of_float: of_float,
      to_float: to_float,
      of_string: of_string,
      to_string: Nativeint.to_string,
      $plus: $plus,
      $neg: $neg,
      $star: $star,
      $slash: $slash,
      $tilde$neg: neg$1,
      $great$eq: $great$eq,
      $less$eq: $less$eq,
      $eq: $eq,
      $great: $great,
      $less: $less$1,
      $less$great: $less$great,
      abs: Nativeint.abs,
      neg: neg$1,
      zero: Nativeint.zero,
      of_int_exn: Int_conversions$negBase.int_to_nativeint,
      rem: rem
    });

var $percent = include$5.$percent;

var $slash$percent = include$5.$slash$percent;

var $slash$slash = include$5.$slash$slash;

var t_sexp_grammar = Import$negBase.nativeint_sexp_grammar;

var of_int_exn = Int_conversions$negBase.int_to_nativeint;

var to_int_exn = Int_conversions$negBase.nativeint_to_int_exn;

var hash_fold_t = Import$negBase.hash_fold_nativeint;

var t_of_sexp = Import$negBase.nativeint_of_sexp;

var sexp_of_t = include$2.sexp_of_t;

var to_string$1 = Nativeint.to_string;

var $great$eq$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$great$eq;

var $less$eq$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$less$eq;

var $eq$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$eq;

var $great$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$great;

var $less$2 = Import$negBase.Nativeint_replace_polymorphic_compare.$less;

var $less$great$1 = Import$negBase.Nativeint_replace_polymorphic_compare.$less$great;

var equal = Import$negBase.Nativeint_replace_polymorphic_compare.equal;

var compare$1 = Import$negBase.Nativeint_replace_polymorphic_compare.compare;

var min = Import$negBase.Nativeint_replace_polymorphic_compare.min;

var max = Import$negBase.Nativeint_replace_polymorphic_compare.max;

var ascending = Import$negBase.Nativeint_replace_polymorphic_compare.ascending;

var descending = Import$negBase.Nativeint_replace_polymorphic_compare.descending;

var comparator = include.comparator;

var pp = include$4.pp;

var is_positive = include$1.is_positive;

var is_non_negative = include$1.is_non_negative;

var is_negative = include$1.is_negative;

var is_non_positive = include$1.is_non_positive;

var sign = include$1.sign;

var Hex = include$3.Hex;

var to_string_hum = include$2.to_string_hum;

var zero = Nativeint.zero;

var one = Nativeint.one;

var minus_one = Nativeint.minus_one;

var $tilde$neg = neg$1;

var land = bit_and;

var lor = bit_or;

var lxor = bit_xor;

var lnot = Nativeint.lognot;

var lsl = shift_left;

var asr = shift_right;

var round = include$5.round;

var round_towards_zero = include$5.round_towards_zero;

var round_down = include$5.round_down;

var round_up = include$5.round_up;

var round_nearest = include$5.round_nearest;

var abs = Nativeint.abs;

var succ = Nativeint.succ;

var pred = Nativeint.pred;

var bit_not = Nativeint.lognot;

var popcount = Popcount$negBase.nativeint_popcount;

var of_int32_exn = Int_conversions$negBase.int32_to_nativeint;

var to_int32_exn = Int_conversions$negBase.nativeint_to_int32_exn;

var of_int64_exn = Int_conversions$negBase.int64_to_nativeint_exn;

var to_int64 = Int_conversions$negBase.nativeint_to_int64;

var of_nativeint_exn = of_nativeint;

var to_nativeint_exn = to_nativeint;

var max_value = Nativeint.max_int;

var min_value = Nativeint.min_int;

var lsr = shift_right_logical;

function clz(prim) {
  return Caml_external_polyfill.resolve("Base_int_math_nativeint_clz")(prim);
}

function ctz(prim) {
  return Caml_external_polyfill.resolve("Base_int_math_nativeint_ctz")(prim);
}

var O = {
  $plus: $plus,
  $neg: $neg,
  $star: $star,
  $slash: $slash,
  $tilde$neg: neg$1,
  $star$star: $star$star,
  $great$eq: $great$eq,
  $less$eq: $less$eq,
  $eq: $eq,
  $great: $great,
  $less: $less$1,
  $less$great: $less$great,
  abs: Nativeint.abs,
  neg: neg$1,
  zero: Nativeint.zero,
  $percent: $percent,
  $slash$percent: $slash$percent,
  $slash$slash: $slash$slash,
  land: bit_and,
  lor: bit_or,
  lxor: bit_xor,
  lnot: Nativeint.lognot,
  lsl: shift_left,
  asr: shift_right,
  lsr: shift_right_logical
};

var of_int = Int_conversions$negBase.int_to_nativeint;

var to_int = Int_conversions$negBase.nativeint_to_int;

var of_int32 = Int_conversions$negBase.int32_to_nativeint;

var to_int32 = Int_conversions$negBase.nativeint_to_int32;

var of_int64 = Int_conversions$negBase.int64_to_nativeint;

var to_int_trunc = Int_conversions$negBase.nativeint_to_int_trunc;

var to_int32_trunc = Int_conversions$negBase.nativeint_to_int32_trunc;

var of_int64_trunc = Int_conversions$negBase.int64_to_nativeint_trunc;

exports.t_sexp_grammar = t_sexp_grammar;
exports.of_float = of_float;
exports.to_float = to_float;
exports.of_int_exn = of_int_exn;
exports.to_int_exn = to_int_exn;
exports.hash_fold_t = hash_fold_t;
exports.hash = hash;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.of_string = of_string;
exports.to_string = to_string$1;
exports.$great$eq = $great$eq$1;
exports.$less$eq = $less$eq$1;
exports.$eq = $eq$1;
exports.$great = $great$1;
exports.$less = $less$2;
exports.$less$great = $less$great$1;
exports.equal = equal;
exports.compare = compare$1;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.pp = pp;
exports.hashable = hashable;
exports.is_positive = is_positive;
exports.is_non_negative = is_non_negative;
exports.is_negative = is_negative;
exports.is_non_positive = is_non_positive;
exports.sign = sign;
exports.invariant = invariant;
exports.Hex = Hex;
exports.to_string_hum = to_string_hum;
exports.zero = zero;
exports.one = one;
exports.minus_one = minus_one;
exports.$plus = $plus;
exports.$neg = $neg;
exports.$star = $star;
exports.$star$star = $star$star;
exports.neg = neg$1;
exports.$tilde$neg = $tilde$neg;
exports.$slash$percent = $slash$percent;
exports.$percent = $percent;
exports.$slash = $slash;
exports.rem = rem;
exports.$slash$slash = $slash$slash;
exports.land = land;
exports.lor = lor;
exports.lxor = lxor;
exports.lnot = lnot;
exports.lsl = lsl;
exports.asr = asr;
exports.round = round;
exports.round_towards_zero = round_towards_zero;
exports.round_down = round_down;
exports.round_up = round_up;
exports.round_nearest = round_nearest;
exports.abs = abs;
exports.succ = succ;
exports.pred = pred;
exports.pow = pow;
exports.bit_and = bit_and;
exports.bit_or = bit_or;
exports.bit_xor = bit_xor;
exports.bit_not = bit_not;
exports.popcount = popcount;
exports.shift_left = shift_left;
exports.shift_right = shift_right;
exports.decr = decr;
exports.incr = incr;
exports.of_int32_exn = of_int32_exn;
exports.to_int32_exn = to_int32_exn;
exports.of_int64_exn = of_int64_exn;
exports.to_int64 = to_int64;
exports.of_nativeint_exn = of_nativeint_exn;
exports.to_nativeint_exn = to_nativeint_exn;
exports.of_float_unchecked = of_float_unchecked;
exports.num_bits = num_bits;
exports.max_value = max_value;
exports.min_value = min_value;
exports.lsr = lsr;
exports.shift_right_logical = shift_right_logical;
exports.ceil_pow2 = ceil_pow2;
exports.floor_pow2 = floor_pow2;
exports.ceil_log2 = ceil_log2;
exports.floor_log2 = floor_log2;
exports.is_pow2 = is_pow2;
exports.clz = clz;
exports.ctz = ctz;
exports.O = O;
exports.of_int = of_int;
exports.to_int = to_int;
exports.of_int32 = of_int32;
exports.to_int32 = to_int32;
exports.of_nativeint = of_nativeint;
exports.to_nativeint = to_nativeint;
exports.of_int64 = of_int64;
exports.to_int_trunc = to_int_trunc;
exports.to_int32_trunc = to_int32_trunc;
exports.of_int64_trunc = of_int64_trunc;
/* include Not a pure module */

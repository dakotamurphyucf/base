// Generated by Melange
'use strict';

var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Array0$negBase = require("./array0.bs.js");
var Import$negBase = require("./import.bs.js");
var Int_conversions$negBase = require("./int_conversions.bs.js");

var int32_positive_overflow_bounds = [
  2147483647,
  2147483647,
  46340,
  1290,
  215,
  73,
  35,
  21,
  14,
  10,
  8,
  7,
  5,
  5,
  4,
  4,
  3,
  3,
  3,
  3,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
];

var overflow_bound_max_int_value = Import$negBase.lsr(-1, 1);

var int_positive_overflow_bounds;

if (Int_conversions$negBase.num_bits_int === 32 || Int_conversions$negBase.num_bits_int === 31) {
  int_positive_overflow_bounds = Int_conversions$negBase.num_bits_int >= 32 ? Array0$negBase.map(int32_positive_overflow_bounds, (function (prim) {
            return prim;
          })) : [
      1073741823,
      1073741823,
      32767,
      1023,
      181,
      63,
      31,
      19,
      13,
      10,
      7,
      6,
      5,
      4,
      4,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ];
} else {
  if (Int_conversions$negBase.num_bits_int !== 63) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "pow_overflow_bounds.ml",
            218,
            9
          ],
          Error: new Error()
        };
  }
  int_positive_overflow_bounds = [
    Caml_int64.to_int32([
          1073741823,
          4294967295
        ]),
    Caml_int64.to_int32([
          1073741823,
          4294967295
        ]),
    Caml_int64.to_int32([
          0,
          2147483647
        ]),
    1664510,
    46340,
    5404,
    1290,
    463,
    215,
    118,
    73,
    49,
    35,
    27,
    21,
    17,
    14,
    12,
    10,
    9,
    8,
    7,
    7,
    6,
    5,
    5,
    5,
    4,
    4,
    4,
    4,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1
  ];
}

var int63_on_int64_positive_overflow_bounds = [
  [
    1073741823,
    4294967295
  ],
  [
    1073741823,
    4294967295
  ],
  [
    0,
    2147483647
  ],
  [
    0,
    1664510
  ],
  [
    0,
    46340
  ],
  [
    0,
    5404
  ],
  [
    0,
    1290
  ],
  [
    0,
    463
  ],
  [
    0,
    215
  ],
  [
    0,
    118
  ],
  [
    0,
    73
  ],
  [
    0,
    49
  ],
  [
    0,
    35
  ],
  [
    0,
    27
  ],
  [
    0,
    21
  ],
  [
    0,
    17
  ],
  [
    0,
    14
  ],
  [
    0,
    12
  ],
  [
    0,
    10
  ],
  [
    0,
    9
  ],
  [
    0,
    8
  ],
  [
    0,
    7
  ],
  [
    0,
    7
  ],
  [
    0,
    6
  ],
  [
    0,
    5
  ],
  [
    0,
    5
  ],
  [
    0,
    5
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  Caml_int64.one,
  Caml_int64.one
];

var int64_positive_overflow_bounds = [
  Caml_int64.max_int,
  Caml_int64.max_int,
  [
    0,
    3037000499
  ],
  [
    0,
    2097151
  ],
  [
    0,
    55108
  ],
  [
    0,
    6208
  ],
  [
    0,
    1448
  ],
  [
    0,
    511
  ],
  [
    0,
    234
  ],
  [
    0,
    127
  ],
  [
    0,
    78
  ],
  [
    0,
    52
  ],
  [
    0,
    38
  ],
  [
    0,
    28
  ],
  [
    0,
    22
  ],
  [
    0,
    18
  ],
  [
    0,
    15
  ],
  [
    0,
    13
  ],
  [
    0,
    11
  ],
  [
    0,
    9
  ],
  [
    0,
    8
  ],
  [
    0,
    7
  ],
  [
    0,
    7
  ],
  [
    0,
    6
  ],
  [
    0,
    6
  ],
  [
    0,
    5
  ],
  [
    0,
    5
  ],
  [
    0,
    5
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    4
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    3
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  [
    0,
    2
  ],
  Caml_int64.one
];

var int64_negative_overflow_bounds = [
  [
    -2147483648,
    1
  ],
  [
    -2147483648,
    1
  ],
  [
    -1,
    1257966797
  ],
  [
    -1,
    4292870145
  ],
  [
    -1,
    4294912188
  ],
  [
    -1,
    4294961088
  ],
  [
    -1,
    4294965848
  ],
  [
    -1,
    4294966785
  ],
  [
    -1,
    4294967062
  ],
  [
    -1,
    4294967169
  ],
  [
    -1,
    4294967218
  ],
  [
    -1,
    4294967244
  ],
  [
    -1,
    4294967258
  ],
  [
    -1,
    4294967268
  ],
  [
    -1,
    4294967274
  ],
  [
    -1,
    4294967278
  ],
  [
    -1,
    4294967281
  ],
  [
    -1,
    4294967283
  ],
  [
    -1,
    4294967285
  ],
  [
    -1,
    4294967287
  ],
  [
    -1,
    4294967288
  ],
  [
    -1,
    4294967289
  ],
  [
    -1,
    4294967289
  ],
  [
    -1,
    4294967290
  ],
  [
    -1,
    4294967290
  ],
  [
    -1,
    4294967291
  ],
  [
    -1,
    4294967291
  ],
  [
    -1,
    4294967291
  ],
  [
    -1,
    4294967292
  ],
  [
    -1,
    4294967292
  ],
  [
    -1,
    4294967292
  ],
  [
    -1,
    4294967292
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967293
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  [
    -1,
    4294967294
  ],
  Caml_int64.neg_one
];

var overflow_bound_max_int32_value = 2147483647;

var overflow_bound_max_int63_on_int64_value = [
  1073741823,
  4294967295
];

var overflow_bound_max_int64_value = Caml_int64.max_int;

exports.overflow_bound_max_int32_value = overflow_bound_max_int32_value;
exports.int32_positive_overflow_bounds = int32_positive_overflow_bounds;
exports.overflow_bound_max_int_value = overflow_bound_max_int_value;
exports.int_positive_overflow_bounds = int_positive_overflow_bounds;
exports.overflow_bound_max_int63_on_int64_value = overflow_bound_max_int63_on_int64_value;
exports.int63_on_int64_positive_overflow_bounds = int63_on_int64_positive_overflow_bounds;
exports.overflow_bound_max_int64_value = overflow_bound_max_int64_value;
exports.int64_positive_overflow_bounds = int64_positive_overflow_bounds;
exports.int64_negative_overflow_bounds = int64_negative_overflow_bounds;
/* overflow_bound_max_int_value Not a pure module */

// Generated by Melange
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf$negBase = require("./printf.bs.js");
var Import0$negBase = require("./import0.bs.js");

function to_int(prim) {
  return prim;
}

function unsafe_of_int(prim) {
  return prim;
}

function int_is_ok(i) {
  if (Import0$negBase.$less$eq(0, i)) {
    return Import0$negBase.$less$eq(i, 255);
  } else {
    return false;
  }
}

function of_int(i) {
  if (int_is_ok(i)) {
    return i;
  }
  
}

function of_int_exn(i) {
  if (int_is_ok(i)) {
    return i;
  } else {
    return Curry._2(Printf$negBase.failwithf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Char.of_int_exn got integer out of range: ",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_d */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "Char.of_int_exn got integer out of range: %d"
                  }), i, undefined);
  }
}

function equal(t1, t2) {
  return t1 === t2;
}

var failwithf = Printf$negBase.failwithf;

var escaped = Char.escaped;

var lowercase = Char.lowercase_ascii;

var uppercase = Char.uppercase_ascii;

var min_value = 0;

var max_value = 255;

exports.failwithf = failwithf;
exports.escaped = escaped;
exports.lowercase = lowercase;
exports.to_int = to_int;
exports.unsafe_of_int = unsafe_of_int;
exports.uppercase = uppercase;
exports.int_is_ok = int_is_ok;
exports.min_value = min_value;
exports.max_value = max_value;
exports.of_int = of_int;
exports.of_int_exn = of_int_exn;
exports.equal = equal;
/* Printf-Base Not a pure module */

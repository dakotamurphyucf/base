// Generated by Melange
'use strict';

var Sign0$negBase = require("./sign0.bs.js");
var Import$negBase = require("./import.bs.js");
var Identifiable$negBase = require("./identifiable.bs.js");

var include = Identifiable$negBase.Make({
      compare: Sign0$negBase.compare,
      hash_fold_t: Sign0$negBase.hash_fold_t,
      hash: Sign0$negBase.hash,
      t_of_sexp: Sign0$negBase.t_of_sexp,
      sexp_of_t: Sign0$negBase.sexp_of_t,
      of_string: Sign0$negBase.of_string,
      to_string: Sign0$negBase.to_string,
      module_name: Sign0$negBase.module_name
    });

function to_float(param) {
  switch (param) {
    case /* Neg */0 :
        return -1;
    case /* Zero */1 :
        return 0;
    case /* Pos */2 :
        return 1;
    
  }
}

function flip(param) {
  switch (param) {
    case /* Neg */0 :
        return /* Pos */2;
    case /* Zero */1 :
        return /* Zero */1;
    case /* Pos */2 :
        return /* Neg */0;
    
  }
}

function $star(t, t$p) {
  return Sign0$negBase.of_int(Import$negBase.$star(Sign0$negBase.to_int(t), Sign0$negBase.to_int(t$p)));
}

var all = Sign0$negBase.all;

var t_sexp_grammar = Sign0$negBase.t_sexp_grammar;

var hash_fold_t = include.hash_fold_t;

var hash = include.hash;

var t_of_sexp = include.t_of_sexp;

var sexp_of_t = include.sexp_of_t;

var of_string = include.of_string;

var to_string = include.to_string;

var $great$eq = Sign0$negBase.Replace_polymorphic_compare.$great$eq;

var $less$eq = Sign0$negBase.Replace_polymorphic_compare.$less$eq;

var $eq = Sign0$negBase.Replace_polymorphic_compare.$eq;

var $great = Sign0$negBase.Replace_polymorphic_compare.$great;

var $less = Sign0$negBase.Replace_polymorphic_compare.$less;

var $less$great = Sign0$negBase.Replace_polymorphic_compare.$less$great;

var equal = Sign0$negBase.Replace_polymorphic_compare.equal;

var compare = Sign0$negBase.Replace_polymorphic_compare.compare;

var min = Sign0$negBase.Replace_polymorphic_compare.min;

var max = Sign0$negBase.Replace_polymorphic_compare.max;

var ascending = Sign0$negBase.Replace_polymorphic_compare.ascending;

var descending = Sign0$negBase.Replace_polymorphic_compare.descending;

var between = include.between;

var clamp_exn = include.clamp_exn;

var clamp = include.clamp;

var comparator = include.comparator;

var pp = include.pp;

var hashable = include.hashable;

var of_int = Sign0$negBase.of_int;

var to_int = Sign0$negBase.to_int;

exports.all = all;
exports.t_sexp_grammar = t_sexp_grammar;
exports.hash_fold_t = hash_fold_t;
exports.hash = hash;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.of_string = of_string;
exports.to_string = to_string;
exports.$great$eq = $great$eq;
exports.$less$eq = $less$eq;
exports.$eq = $eq;
exports.$great = $great;
exports.$less = $less;
exports.$less$great = $less$great;
exports.equal = equal;
exports.compare = compare;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.pp = pp;
exports.hashable = hashable;
exports.of_int = of_int;
exports.to_int = to_int;
exports.to_float = to_float;
exports.flip = flip;
exports.$star = $star;
/* include Not a pure module */

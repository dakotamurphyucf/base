// Generated by Melange
'use strict';

var Int$negBase = require("./int.bs.js");
var Import$negBase = require("./import.bs.js");
var Comparable$negBase = require("./comparable.bs.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");
var Source_code_position0$negBase = require("./source_code_position0.bs.js");

function hash_override(param) {
  return Import$negBase.lxor(Import$negBase.lxor(Import$negBase.lxor(Caml_external_polyfill.resolve("Base_hash_string")(param.pos_fname), Int$negBase.hash(param.pos_lnum)), Int$negBase.hash(param.pos_bol)), Int$negBase.hash(param.pos_cnum));
}

var include = Comparable$negBase.Make_using_comparator({
      sexp_of_t: Source_code_position0$negBase.sexp_of_t,
      comparator: Source_code_position0$negBase.comparator
    });

function of_pos(param) {
  return {
          pos_fname: param[0],
          pos_lnum: param[1],
          pos_bol: 0,
          pos_cnum: param[2]
        };
}

var hash_fold_t = Source_code_position0$negBase.hash_fold_t;

var hash = hash_override;

var sexp_of_t = Source_code_position0$negBase.sexp_of_t;

var $great$eq = include.$great$eq;

var $less$eq = include.$less$eq;

var $eq = include.$eq;

var $great = include.$great;

var $less = include.$less;

var $less$great = include.$less$great;

var equal = include.equal;

var compare = include.compare;

var min = include.min;

var max = include.max;

var ascending = include.ascending;

var descending = include.descending;

var between = include.between;

var clamp_exn = include.clamp_exn;

var clamp = include.clamp;

var comparator = include.comparator;

var to_string = Source_code_position0$negBase.to_string;

exports.hash_fold_t = hash_fold_t;
exports.hash = hash;
exports.sexp_of_t = sexp_of_t;
exports.$great$eq = $great$eq;
exports.$less$eq = $less$eq;
exports.$eq = $eq;
exports.$great = $great;
exports.$less = $less;
exports.$less$great = $less$great;
exports.equal = equal;
exports.compare = compare;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.to_string = to_string;
exports.of_pos = of_pos;
/* include Not a pure module */

// Generated by Melange
'use strict';

var Hash$negBase = require("./hash.bs.js");
var Sexp$negSexplib0 = require("sexplib0/./sexp.bs.js");
var Ppx_compare_lib$negBase = require("./ppx_compare_lib.bs.js");

function compare(a__001_, b__002_) {
  if (Ppx_compare_lib$negBase.phys_equal(a__001_, b__002_)) {
    return 0;
  } else if (a__001_.TAG === /* Atom */0) {
    if (b__002_.TAG === /* Atom */0) {
      return Ppx_compare_lib$negBase.Builtin.compare_string(a__001_._0, b__002_._0);
    } else {
      return -1;
    }
  } else if (b__002_.TAG === /* Atom */0) {
    return 1;
  } else {
    return Ppx_compare_lib$negBase.Builtin.compare_list(compare, a__001_._0, b__002_._0);
  }
}

function hash_fold_t(hsv, arg) {
  if (arg.TAG === /* Atom */0) {
    var hsv$1 = Hash$negBase.fold_int(hsv, 0);
    return Hash$negBase.Builtin.hash_fold_string(hsv$1, arg._0);
  }
  var hsv$2 = Hash$negBase.fold_int(hsv, 1);
  return Hash$negBase.Builtin.hash_fold_list(hash_fold_t, hsv$2, arg._0);
}

function hash(x) {
  var hsv = Hash$negBase.create(undefined, undefined);
  return Hash$negBase.get_hash_value(hash_fold_t(hsv, x));
}

function invariant(param) {
  
}

var t_of_sexp = Sexp$negSexplib0.t_of_sexp;

var sexp_of_t = Sexp$negSexplib0.sexp_of_t;

var t_sexp_grammar = Sexp$negSexplib0.t_sexp_grammar;

var equal = Sexp$negSexplib0.equal;

var Not_found_s = Sexp$negSexplib0.Not_found_s;

var Of_sexp_error = Sexp$negSexplib0.Of_sexp_error;

var message = Sexp$negSexplib0.message;

var default_indent = Sexp$negSexplib0.default_indent;

var pp_hum = Sexp$negSexplib0.pp_hum;

var pp_hum_indent = Sexp$negSexplib0.pp_hum_indent;

var pp_mach = Sexp$negSexplib0.pp_mach;

var pp = Sexp$negSexplib0.pp;

var to_string_hum = Sexp$negSexplib0.to_string_hum;

var to_string_mach = Sexp$negSexplib0.to_string_mach;

var to_string = Sexp$negSexplib0.to_string;

var of_float_style = Sexp$negSexplib0.of_float_style;

var of_int_style = Sexp$negSexplib0.of_int_style;

var Private = Sexp$negSexplib0.Private;

var of_string;

exports.hash_fold_t = hash_fold_t;
exports.hash = hash;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.t_sexp_grammar = t_sexp_grammar;
exports.equal = equal;
exports.compare = compare;
exports.Not_found_s = Not_found_s;
exports.Of_sexp_error = Of_sexp_error;
exports.message = message;
exports.default_indent = default_indent;
exports.pp_hum = pp_hum;
exports.pp_hum_indent = pp_hum_indent;
exports.pp_mach = pp_mach;
exports.pp = pp;
exports.to_string_hum = to_string_hum;
exports.to_string_mach = to_string_mach;
exports.to_string = to_string;
exports.of_float_style = of_float_style;
exports.of_int_style = of_int_style;
exports.Private = Private;
exports.invariant = invariant;
exports.of_string = of_string;
/* Hash-Base Not a pure module */

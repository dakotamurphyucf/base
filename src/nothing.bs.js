// Generated by Melange
'use strict';

var Import$negBase = require("./import.bs.js");
var Identifiable$negBase = require("./identifiable.bs.js");
var Sexp_conv_error$negSexplib0 = require("sexplib0/./sexp_conv_error.bs.js");

function unreachable_code(param) {
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "nothing.ml",
          6,
          25
        ],
        Error: new Error()
      };
}

function hash_fold_t(param, t) {
  return unreachable_code(t);
}

function compare(a, param) {
  return unreachable_code(a);
}

function t_of_sexp(sexp) {
  return Sexp_conv_error$negSexplib0.empty_type("Base.Nothing.t", sexp);
}

function of_string(param) {
  return Import$negBase.failwith("Base.Nothing.of_string: not supported");
}

var include = Identifiable$negBase.Make({
      compare: compare,
      hash_fold_t: hash_fold_t,
      hash: unreachable_code,
      t_of_sexp: t_of_sexp,
      sexp_of_t: unreachable_code,
      of_string: of_string,
      to_string: unreachable_code,
      module_name: "Base.Nothing"
    });

var all = /* [] */0;

var t_sexp_grammar = {
  TAG: /* Union */5,
  _0: /* [] */0
};

var hash_fold_t$1 = include.hash_fold_t;

var hash = include.hash;

var t_of_sexp$1 = include.t_of_sexp;

var sexp_of_t = include.sexp_of_t;

var of_string$1 = include.of_string;

var to_string = include.to_string;

var $great$eq = include.$great$eq;

var $less$eq = include.$less$eq;

var $eq = include.$eq;

var $great = include.$great;

var $less = include.$less;

var $less$great = include.$less$great;

var equal = include.equal;

var compare$1 = include.compare;

var min = include.min;

var max = include.max;

var ascending = include.ascending;

var descending = include.descending;

var between = include.between;

var clamp_exn = include.clamp_exn;

var clamp = include.clamp;

var comparator = include.comparator;

var pp = include.pp;

var hashable = include.hashable;

exports.all = all;
exports.t_sexp_grammar = t_sexp_grammar;
exports.unreachable_code = unreachable_code;
exports.hash_fold_t = hash_fold_t$1;
exports.hash = hash;
exports.t_of_sexp = t_of_sexp$1;
exports.sexp_of_t = sexp_of_t;
exports.of_string = of_string$1;
exports.to_string = to_string;
exports.$great$eq = $great$eq;
exports.$less$eq = $less$eq;
exports.$eq = $eq;
exports.$great = $great;
exports.$less = $less;
exports.$less$great = $less$great;
exports.equal = equal;
exports.compare = compare$1;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.pp = pp;
exports.hashable = hashable;
/* include Not a pure module */

// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Exn$negBase = require("./exn.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Import$negBase = require("./import.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function with_return(f) {
  var Return = /* @__PURE__ */Caml_exceptions.create("Return");
  var is_alive = {
    contents: true
  };
  var $$return = function (a) {
    if (!is_alive[0]) {
      Import$negBase.failwith("use of [return] from a [with_return] that already returned");
    }
    return Exn$negBase.raise_without_backtrace({
                RE_EXN_ID: Return,
                _1: a
              });
  };
  try {
    var a = Curry._1(f, $$return);
    is_alive[0] = false;
    return a;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    is_alive[0] = false;
    if (exn.RE_EXN_ID === Return) {
      return exn._1;
    }
    throw exn;
  }
}

function with_return_option(f) {
  return with_return(function ($$return) {
              Curry._1(f, (function (a) {
                      return Curry._1($$return, Caml_option.some(a));
                    }));
              
            });
}

function prepend(param, f) {
  return function (x) {
    return Curry._1(param, Curry._1(f, x));
  };
}

exports.with_return = with_return;
exports.with_return_option = with_return_option;
exports.prepend = prepend;
/* Exn-Base Not a pure module */

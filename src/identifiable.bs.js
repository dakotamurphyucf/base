// Generated by Melange
'use strict';

var Comparable$negBase = require("./comparable.bs.js");
var Pretty_printer$negBase = require("./pretty_printer.bs.js");

function Make(funarg) {
  var hash = funarg.hash;
  var sexp_of_t = funarg.sexp_of_t;
  var include = Comparable$negBase.Make({
        compare: funarg.compare,
        sexp_of_t: funarg.sexp_of_t
      });
  var compare = include.compare;
  var include$1 = Pretty_printer$negBase.Register({
        module_name: funarg.module_name,
        to_string: funarg.to_string
      });
  var hashable = {
    hash: hash,
    compare: compare,
    sexp_of_t: sexp_of_t
  };
  return {
          hash_fold_t: funarg.hash_fold_t,
          hash: hash,
          t_of_sexp: funarg.t_of_sexp,
          sexp_of_t: sexp_of_t,
          of_string: funarg.of_string,
          to_string: funarg.to_string,
          $great$eq: include.$great$eq,
          $less$eq: include.$less$eq,
          $eq: include.$eq,
          $great: include.$great,
          $less: include.$less,
          $less$great: include.$less$great,
          equal: include.equal,
          compare: compare,
          min: include.min,
          max: include.max,
          ascending: include.ascending,
          descending: include.descending,
          between: include.between,
          clamp_exn: include.clamp_exn,
          clamp: include.clamp,
          comparator: include.comparator,
          pp: include$1.pp,
          hashable: hashable
        };
}

function Make_using_comparator(funarg) {
  var hash = funarg.hash;
  var sexp_of_t = funarg.sexp_of_t;
  var include = Comparable$negBase.Make_using_comparator({
        sexp_of_t: funarg.sexp_of_t,
        comparator: funarg.comparator
      });
  var compare = include.compare;
  var include$1 = Pretty_printer$negBase.Register({
        module_name: funarg.module_name,
        to_string: funarg.to_string
      });
  var hashable = {
    hash: hash,
    compare: compare,
    sexp_of_t: sexp_of_t
  };
  return {
          hash_fold_t: funarg.hash_fold_t,
          hash: hash,
          t_of_sexp: funarg.t_of_sexp,
          sexp_of_t: sexp_of_t,
          of_string: funarg.of_string,
          to_string: funarg.to_string,
          $great$eq: include.$great$eq,
          $less$eq: include.$less$eq,
          $eq: include.$eq,
          $great: include.$great,
          $less: include.$less,
          $less$great: include.$less$great,
          equal: include.equal,
          compare: compare,
          min: include.min,
          max: include.max,
          ascending: include.ascending,
          descending: include.descending,
          between: include.between,
          clamp_exn: include.clamp_exn,
          clamp: include.clamp,
          comparator: include.comparator,
          pp: include$1.pp,
          hashable: hashable
        };
}

exports.Make = Make;
exports.Make_using_comparator = Make_using_comparator;
/* Comparable-Base Not a pure module */

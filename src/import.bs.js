// Generated by Melange
'use strict';

var Hash$negBase = require("./hash.bs.js");
var Sexp$negBase = require("./sexp.bs.js");
var Import0$negBase = require("./import0.bs.js");
var Sexp_conv$negSexplib0 = require("sexplib0/./sexp_conv.bs.js");
var Ppx_compare_lib$negBase = require("./ppx_compare_lib.bs.js");

var Exit = Import0$negBase.Exit;

var max_int = Import0$negBase.max_int;

var min_int = Import0$negBase.min_int;

var infinity = Import0$negBase.infinity;

var neg_infinity = Import0$negBase.neg_infinity;

var nan = Import0$negBase.nan;

var max_float = Import0$negBase.max_float;

var min_float = Import0$negBase.min_float;

var epsilon_float = Import0$negBase.epsilon_float;

var classify_float = Import0$negBase.classify_float;

var char_of_int = Import0$negBase.char_of_int;

var string_of_bool = Import0$negBase.string_of_bool;

var bool_of_string_opt = Import0$negBase.bool_of_string_opt;

var bool_of_string = Import0$negBase.bool_of_string;

var string_of_int = Import0$negBase.string_of_int;

var int_of_string_opt = Import0$negBase.int_of_string_opt;

var string_of_float = Import0$negBase.string_of_float;

var float_of_string_opt = Import0$negBase.float_of_string_opt;

var stdin = Import0$negBase.stdin;

var stdout = Import0$negBase.stdout;

var stderr = Import0$negBase.stderr;

var print_char = Import0$negBase.print_char;

var print_string = Import0$negBase.print_string;

var print_bytes = Import0$negBase.print_bytes;

var print_int = Import0$negBase.print_int;

var print_float = Import0$negBase.print_float;

var print_endline = Import0$negBase.print_endline;

var print_newline = Import0$negBase.print_newline;

var prerr_char = Import0$negBase.prerr_char;

var prerr_string = Import0$negBase.prerr_string;

var prerr_bytes = Import0$negBase.prerr_bytes;

var prerr_int = Import0$negBase.prerr_int;

var prerr_float = Import0$negBase.prerr_float;

var prerr_endline = Import0$negBase.prerr_endline;

var prerr_newline = Import0$negBase.prerr_newline;

var read_line = Import0$negBase.read_line;

var read_int_opt = Import0$negBase.read_int_opt;

var read_int = Import0$negBase.read_int;

var read_float_opt = Import0$negBase.read_float_opt;

var read_float = Import0$negBase.read_float;

var open_out = Import0$negBase.open_out;

var open_out_bin = Import0$negBase.open_out_bin;

var open_out_gen = Import0$negBase.open_out_gen;

var flush = Import0$negBase.flush;

var flush_all = Import0$negBase.flush_all;

var output_char = Import0$negBase.output_char;

var output_string = Import0$negBase.output_string;

var output_bytes = Import0$negBase.output_bytes;

var output = Import0$negBase.output;

var output_substring = Import0$negBase.output_substring;

var output_byte = Import0$negBase.output_byte;

var output_binary_int = Import0$negBase.output_binary_int;

var output_value = Import0$negBase.output_value;

var seek_out = Import0$negBase.seek_out;

var pos_out = Import0$negBase.pos_out;

var out_channel_length = Import0$negBase.out_channel_length;

var close_out = Import0$negBase.close_out;

var close_out_noerr = Import0$negBase.close_out_noerr;

var set_binary_mode_out = Import0$negBase.set_binary_mode_out;

var open_in = Import0$negBase.open_in;

var open_in_bin = Import0$negBase.open_in_bin;

var open_in_gen = Import0$negBase.open_in_gen;

var input_char = Import0$negBase.input_char;

var input_line = Import0$negBase.input_line;

var input = Import0$negBase.input;

var really_input = Import0$negBase.really_input;

var really_input_string = Import0$negBase.really_input_string;

var input_byte = Import0$negBase.input_byte;

var input_binary_int = Import0$negBase.input_binary_int;

var input_value = Import0$negBase.input_value;

var seek_in = Import0$negBase.seek_in;

var pos_in = Import0$negBase.pos_in;

var in_channel_length = Import0$negBase.in_channel_length;

var close_in = Import0$negBase.close_in;

var close_in_noerr = Import0$negBase.close_in_noerr;

var set_binary_mode_in = Import0$negBase.set_binary_mode_in;

var string_of_format = Import0$negBase.string_of_format;

var $caret$caret = Import0$negBase.$caret$caret;

var exit = Import0$negBase.exit;

var at_exit = Import0$negBase.at_exit;

var valid_float_lexem = Import0$negBase.valid_float_lexem;

var unsafe_really_input = Import0$negBase.unsafe_really_input;

var do_at_exit = Import0$negBase.do_at_exit;

var Not_found = Import0$negBase.Not_found;

var Caml = Import0$negBase.Caml;

var bool_to_int = Import0$negBase.bool_to_int;

var $bang$eq = Import0$negBase.$bang$eq;

var $star = Import0$negBase.$star;

var $star$star = Import0$negBase.$star$star;

var $star$dot = Import0$negBase.$star$dot;

var $plus = Import0$negBase.$plus;

var $plus$dot = Import0$negBase.$plus$dot;

var $neg = Import0$negBase.$neg;

var $neg$dot = Import0$negBase.$neg$dot;

var $slash = Import0$negBase.$slash;

var $slash$dot = Import0$negBase.$slash$dot;

var Int_replace_polymorphic_compare = Import0$negBase.Int_replace_polymorphic_compare;

var $less = Import0$negBase.$less;

var $less$eq = Import0$negBase.$less$eq;

var $less$great = Import0$negBase.$less$great;

var $great = Import0$negBase.$great;

var $great$eq = Import0$negBase.$great$eq;

var compare = Import0$negBase.compare;

var ascending = Import0$negBase.ascending;

var descending = Import0$negBase.descending;

var equal = Import0$negBase.equal;

var max = Import0$negBase.max;

var min = Import0$negBase.min;

var Int32_replace_polymorphic_compare = Import0$negBase.Int32_replace_polymorphic_compare;

var Int64_replace_polymorphic_compare = Import0$negBase.Int64_replace_polymorphic_compare;

var Nativeint_replace_polymorphic_compare = Import0$negBase.Nativeint_replace_polymorphic_compare;

var Bool_replace_polymorphic_compare = Import0$negBase.Bool_replace_polymorphic_compare;

var Char_replace_polymorphic_compare = Import0$negBase.Char_replace_polymorphic_compare;

var Uchar_replace_polymorphic_compare = Import0$negBase.Uchar_replace_polymorphic_compare;

var Float_replace_polymorphic_compare = Import0$negBase.Float_replace_polymorphic_compare;

var String_replace_polymorphic_compare = Import0$negBase.String_replace_polymorphic_compare;

var Bytes_replace_polymorphic_compare = Import0$negBase.Bytes_replace_polymorphic_compare;

var $at = Import0$negBase.$at;

var $caret = Import0$negBase.$caret;

var $tilde$neg = Import0$negBase.$tilde$neg;

var $tilde$neg$dot = Import0$negBase.$tilde$neg$dot;

var asr = Import0$negBase.asr;

var land = Import0$negBase.land;

var lnot = Import0$negBase.lnot;

var lor = Import0$negBase.lor;

var lsl = Import0$negBase.lsl;

var lsr = Import0$negBase.lsr;

var lxor = Import0$negBase.lxor;

var mod = Import0$negBase.mod;

var abs = Import0$negBase.abs;

var failwith = Import0$negBase.failwith;

var fst = Import0$negBase.fst;

var invalid_arg = Import0$negBase.invalid_arg;

var snd = Import0$negBase.snd;

var phys_equal = Import0$negBase.phys_equal;

var decr = Import0$negBase.decr;

var incr = Import0$negBase.incr;

var float_of_string = Import0$negBase.float_of_string;

var am_testing = Import0$negBase.am_testing;

var default_string_of_float = Sexp_conv$negSexplib0.default_string_of_float;

var write_old_option_format = Sexp_conv$negSexplib0.write_old_option_format;

var read_old_option_format = Sexp_conv$negSexplib0.read_old_option_format;

var list_map = Sexp_conv$negSexplib0.list_map;

var sexp_of_unit = Sexp_conv$negSexplib0.sexp_of_unit;

var sexp_of_bool = Sexp_conv$negSexplib0.sexp_of_bool;

var sexp_of_string = Sexp_conv$negSexplib0.sexp_of_string;

var sexp_of_bytes = Sexp_conv$negSexplib0.sexp_of_bytes;

var sexp_of_char = Sexp_conv$negSexplib0.sexp_of_char;

var sexp_of_int = Sexp_conv$negSexplib0.sexp_of_int;

var sexp_of_float = Sexp_conv$negSexplib0.sexp_of_float;

var sexp_of_int32 = Sexp_conv$negSexplib0.sexp_of_int32;

var sexp_of_int64 = Sexp_conv$negSexplib0.sexp_of_int64;

var sexp_of_nativeint = Sexp_conv$negSexplib0.sexp_of_nativeint;

var sexp_of_ref = Sexp_conv$negSexplib0.sexp_of_ref;

var sexp_of_lazy_t = Sexp_conv$negSexplib0.sexp_of_lazy_t;

var sexp_of_option = Sexp_conv$negSexplib0.sexp_of_option;

var sexp_of_pair = Sexp_conv$negSexplib0.sexp_of_pair;

var sexp_of_triple = Sexp_conv$negSexplib0.sexp_of_triple;

var sexp_of_list = Sexp_conv$negSexplib0.sexp_of_list;

var sexp_of_array = Sexp_conv$negSexplib0.sexp_of_array;

var sexp_of_hashtbl = Sexp_conv$negSexplib0.sexp_of_hashtbl;

var sexp_of_opaque = Sexp_conv$negSexplib0.sexp_of_opaque;

var sexp_of_fun = Sexp_conv$negSexplib0.sexp_of_fun;

var Of_sexp_error = Sexp_conv$negSexplib0.Of_sexp_error;

var record_check_extra_fields = Sexp_conv$negSexplib0.record_check_extra_fields;

var of_sexp_error = Sexp_conv$negSexplib0.of_sexp_error;

var of_sexp_error_exn = Sexp_conv$negSexplib0.of_sexp_error_exn;

var unit_of_sexp = Sexp_conv$negSexplib0.unit_of_sexp;

var bool_of_sexp = Sexp_conv$negSexplib0.bool_of_sexp;

var string_of_sexp = Sexp_conv$negSexplib0.string_of_sexp;

var bytes_of_sexp = Sexp_conv$negSexplib0.bytes_of_sexp;

var char_of_sexp = Sexp_conv$negSexplib0.char_of_sexp;

var int_of_sexp = Sexp_conv$negSexplib0.int_of_sexp;

var float_of_sexp = Sexp_conv$negSexplib0.float_of_sexp;

var int32_of_sexp = Sexp_conv$negSexplib0.int32_of_sexp;

var int64_of_sexp = Sexp_conv$negSexplib0.int64_of_sexp;

var nativeint_of_sexp = Sexp_conv$negSexplib0.nativeint_of_sexp;

var ref_of_sexp = Sexp_conv$negSexplib0.ref_of_sexp;

var lazy_t_of_sexp = Sexp_conv$negSexplib0.lazy_t_of_sexp;

var option_of_sexp = Sexp_conv$negSexplib0.option_of_sexp;

var pair_of_sexp = Sexp_conv$negSexplib0.pair_of_sexp;

var triple_of_sexp = Sexp_conv$negSexplib0.triple_of_sexp;

var list_of_sexp = Sexp_conv$negSexplib0.list_of_sexp;

var array_of_sexp = Sexp_conv$negSexplib0.array_of_sexp;

var hashtbl_of_sexp = Sexp_conv$negSexplib0.hashtbl_of_sexp;

var opaque_of_sexp = Sexp_conv$negSexplib0.opaque_of_sexp;

var fun_of_sexp = Sexp_conv$negSexplib0.fun_of_sexp;

var unit_sexp_grammar = Sexp_conv$negSexplib0.unit_sexp_grammar;

var bool_sexp_grammar = Sexp_conv$negSexplib0.bool_sexp_grammar;

var string_sexp_grammar = Sexp_conv$negSexplib0.string_sexp_grammar;

var bytes_sexp_grammar = Sexp_conv$negSexplib0.bytes_sexp_grammar;

var char_sexp_grammar = Sexp_conv$negSexplib0.char_sexp_grammar;

var int_sexp_grammar = Sexp_conv$negSexplib0.int_sexp_grammar;

var float_sexp_grammar = Sexp_conv$negSexplib0.float_sexp_grammar;

var int32_sexp_grammar = Sexp_conv$negSexplib0.int32_sexp_grammar;

var int64_sexp_grammar = Sexp_conv$negSexplib0.int64_sexp_grammar;

var nativeint_sexp_grammar = Sexp_conv$negSexplib0.nativeint_sexp_grammar;

var ref_sexp_grammar = Sexp_conv$negSexplib0.ref_sexp_grammar;

var lazy_t_sexp_grammar = Sexp_conv$negSexplib0.lazy_t_sexp_grammar;

var option_sexp_grammar = Sexp_conv$negSexplib0.option_sexp_grammar;

var list_sexp_grammar = Sexp_conv$negSexplib0.list_sexp_grammar;

var array_sexp_grammar = Sexp_conv$negSexplib0.array_sexp_grammar;

var opaque_sexp_grammar = Sexp_conv$negSexplib0.opaque_sexp_grammar;

var fun_sexp_grammar = Sexp_conv$negSexplib0.fun_sexp_grammar;

var sexp_of_exn = Sexp_conv$negSexplib0.sexp_of_exn;

var printexc_prefer_sexp = Sexp_conv$negSexplib0.printexc_prefer_sexp;

var sexp_of_exn_opt = Sexp_conv$negSexplib0.sexp_of_exn_opt;

var Exn_converter = Sexp_conv$negSexplib0.Exn_converter;

var hash_fold_nativeint = Hash$negBase.Builtin.hash_fold_nativeint;

var hash_fold_int64 = Hash$negBase.Builtin.hash_fold_int64;

var hash_fold_int32 = Hash$negBase.Builtin.hash_fold_int32;

var hash_fold_char = Hash$negBase.Builtin.hash_fold_char;

var hash_fold_int = Hash$negBase.Builtin.hash_fold_int;

var hash_fold_bool = Hash$negBase.Builtin.hash_fold_bool;

var hash_fold_string = Hash$negBase.Builtin.hash_fold_string;

var hash_fold_float = Hash$negBase.Builtin.hash_fold_float;

var hash_fold_unit = Hash$negBase.Builtin.hash_fold_unit;

var hash_fold_option = Hash$negBase.Builtin.hash_fold_option;

var hash_fold_list = Hash$negBase.Builtin.hash_fold_list;

var hash_fold_lazy_t = Hash$negBase.Builtin.hash_fold_lazy_t;

var hash_fold_ref_frozen = Hash$negBase.Builtin.hash_fold_ref_frozen;

var hash_fold_array_frozen = Hash$negBase.Builtin.hash_fold_array_frozen;

var hash_nativeint = Hash$negBase.Builtin.hash_nativeint;

var hash_int64 = Hash$negBase.Builtin.hash_int64;

var hash_int32 = Hash$negBase.Builtin.hash_int32;

var hash_char = Hash$negBase.Builtin.hash_char;

var hash_int = Hash$negBase.Builtin.hash_int;

var hash_bool = Hash$negBase.Builtin.hash_bool;

var hash_string = Hash$negBase.Builtin.hash_string;

var hash_float = Hash$negBase.Builtin.hash_float;

var hash_unit = Hash$negBase.Builtin.hash_unit;

var compare_bool = Ppx_compare_lib$negBase.Builtin.compare_bool;

var compare_char = Ppx_compare_lib$negBase.Builtin.compare_char;

var compare_float = Ppx_compare_lib$negBase.Builtin.compare_float;

var compare_int = Ppx_compare_lib$negBase.Builtin.compare_int;

var compare_int32 = Ppx_compare_lib$negBase.Builtin.compare_int32;

var compare_int64 = Ppx_compare_lib$negBase.Builtin.compare_int64;

var compare_nativeint = Ppx_compare_lib$negBase.Builtin.compare_nativeint;

var compare_string = Ppx_compare_lib$negBase.Builtin.compare_string;

var compare_unit = Ppx_compare_lib$negBase.Builtin.compare_unit;

var compare_array = Ppx_compare_lib$negBase.Builtin.compare_array;

var compare_list = Ppx_compare_lib$negBase.Builtin.compare_list;

var compare_option = Ppx_compare_lib$negBase.Builtin.compare_option;

var compare_ref = Ppx_compare_lib$negBase.Builtin.compare_ref;

var equal_bool = Ppx_compare_lib$negBase.Builtin.equal_bool;

var equal_char = Ppx_compare_lib$negBase.Builtin.equal_char;

var equal_float = Ppx_compare_lib$negBase.Builtin.equal_float;

var equal_int = Ppx_compare_lib$negBase.Builtin.equal_int;

var equal_int32 = Ppx_compare_lib$negBase.Builtin.equal_int32;

var equal_int64 = Ppx_compare_lib$negBase.Builtin.equal_int64;

var equal_nativeint = Ppx_compare_lib$negBase.Builtin.equal_nativeint;

var equal_string = Ppx_compare_lib$negBase.Builtin.equal_string;

var equal_unit = Ppx_compare_lib$negBase.Builtin.equal_unit;

var equal_array = Ppx_compare_lib$negBase.Builtin.equal_array;

var equal_list = Ppx_compare_lib$negBase.Builtin.equal_list;

var equal_option = Ppx_compare_lib$negBase.Builtin.equal_option;

var equal_ref = Ppx_compare_lib$negBase.Builtin.equal_ref;

var Not_found_s = Sexp$negBase.Not_found_s;

exports.Exit = Exit;
exports.max_int = max_int;
exports.min_int = min_int;
exports.infinity = infinity;
exports.neg_infinity = neg_infinity;
exports.nan = nan;
exports.max_float = max_float;
exports.min_float = min_float;
exports.epsilon_float = epsilon_float;
exports.classify_float = classify_float;
exports.char_of_int = char_of_int;
exports.string_of_bool = string_of_bool;
exports.bool_of_string_opt = bool_of_string_opt;
exports.bool_of_string = bool_of_string;
exports.string_of_int = string_of_int;
exports.int_of_string_opt = int_of_string_opt;
exports.string_of_float = string_of_float;
exports.float_of_string_opt = float_of_string_opt;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.print_char = print_char;
exports.print_string = print_string;
exports.print_bytes = print_bytes;
exports.print_int = print_int;
exports.print_float = print_float;
exports.print_endline = print_endline;
exports.print_newline = print_newline;
exports.prerr_char = prerr_char;
exports.prerr_string = prerr_string;
exports.prerr_bytes = prerr_bytes;
exports.prerr_int = prerr_int;
exports.prerr_float = prerr_float;
exports.prerr_endline = prerr_endline;
exports.prerr_newline = prerr_newline;
exports.read_line = read_line;
exports.read_int_opt = read_int_opt;
exports.read_int = read_int;
exports.read_float_opt = read_float_opt;
exports.read_float = read_float;
exports.open_out = open_out;
exports.open_out_bin = open_out_bin;
exports.open_out_gen = open_out_gen;
exports.flush = flush;
exports.flush_all = flush_all;
exports.output_char = output_char;
exports.output_string = output_string;
exports.output_bytes = output_bytes;
exports.output = output;
exports.output_substring = output_substring;
exports.output_byte = output_byte;
exports.output_binary_int = output_binary_int;
exports.output_value = output_value;
exports.seek_out = seek_out;
exports.pos_out = pos_out;
exports.out_channel_length = out_channel_length;
exports.close_out = close_out;
exports.close_out_noerr = close_out_noerr;
exports.set_binary_mode_out = set_binary_mode_out;
exports.open_in = open_in;
exports.open_in_bin = open_in_bin;
exports.open_in_gen = open_in_gen;
exports.input_char = input_char;
exports.input_line = input_line;
exports.input = input;
exports.really_input = really_input;
exports.really_input_string = really_input_string;
exports.input_byte = input_byte;
exports.input_binary_int = input_binary_int;
exports.input_value = input_value;
exports.seek_in = seek_in;
exports.pos_in = pos_in;
exports.in_channel_length = in_channel_length;
exports.close_in = close_in;
exports.close_in_noerr = close_in_noerr;
exports.set_binary_mode_in = set_binary_mode_in;
exports.string_of_format = string_of_format;
exports.$caret$caret = $caret$caret;
exports.exit = exit;
exports.at_exit = at_exit;
exports.valid_float_lexem = valid_float_lexem;
exports.unsafe_really_input = unsafe_really_input;
exports.do_at_exit = do_at_exit;
exports.Not_found = Not_found;
exports.Caml = Caml;
exports.bool_to_int = bool_to_int;
exports.$bang$eq = $bang$eq;
exports.$star = $star;
exports.$star$star = $star$star;
exports.$star$dot = $star$dot;
exports.$plus = $plus;
exports.$plus$dot = $plus$dot;
exports.$neg = $neg;
exports.$neg$dot = $neg$dot;
exports.$slash = $slash;
exports.$slash$dot = $slash$dot;
exports.Int_replace_polymorphic_compare = Int_replace_polymorphic_compare;
exports.$less = $less;
exports.$less$eq = $less$eq;
exports.$less$great = $less$great;
exports.$great = $great;
exports.$great$eq = $great$eq;
exports.compare = compare;
exports.ascending = ascending;
exports.descending = descending;
exports.equal = equal;
exports.max = max;
exports.min = min;
exports.Int32_replace_polymorphic_compare = Int32_replace_polymorphic_compare;
exports.Int64_replace_polymorphic_compare = Int64_replace_polymorphic_compare;
exports.Nativeint_replace_polymorphic_compare = Nativeint_replace_polymorphic_compare;
exports.Bool_replace_polymorphic_compare = Bool_replace_polymorphic_compare;
exports.Char_replace_polymorphic_compare = Char_replace_polymorphic_compare;
exports.Uchar_replace_polymorphic_compare = Uchar_replace_polymorphic_compare;
exports.Float_replace_polymorphic_compare = Float_replace_polymorphic_compare;
exports.String_replace_polymorphic_compare = String_replace_polymorphic_compare;
exports.Bytes_replace_polymorphic_compare = Bytes_replace_polymorphic_compare;
exports.$at = $at;
exports.$caret = $caret;
exports.$tilde$neg = $tilde$neg;
exports.$tilde$neg$dot = $tilde$neg$dot;
exports.asr = asr;
exports.land = land;
exports.lnot = lnot;
exports.lor = lor;
exports.lsl = lsl;
exports.lsr = lsr;
exports.lxor = lxor;
exports.mod = mod;
exports.abs = abs;
exports.failwith = failwith;
exports.fst = fst;
exports.invalid_arg = invalid_arg;
exports.snd = snd;
exports.phys_equal = phys_equal;
exports.decr = decr;
exports.incr = incr;
exports.float_of_string = float_of_string;
exports.am_testing = am_testing;
exports.default_string_of_float = default_string_of_float;
exports.write_old_option_format = write_old_option_format;
exports.read_old_option_format = read_old_option_format;
exports.list_map = list_map;
exports.sexp_of_unit = sexp_of_unit;
exports.sexp_of_bool = sexp_of_bool;
exports.sexp_of_string = sexp_of_string;
exports.sexp_of_bytes = sexp_of_bytes;
exports.sexp_of_char = sexp_of_char;
exports.sexp_of_int = sexp_of_int;
exports.sexp_of_float = sexp_of_float;
exports.sexp_of_int32 = sexp_of_int32;
exports.sexp_of_int64 = sexp_of_int64;
exports.sexp_of_nativeint = sexp_of_nativeint;
exports.sexp_of_ref = sexp_of_ref;
exports.sexp_of_lazy_t = sexp_of_lazy_t;
exports.sexp_of_option = sexp_of_option;
exports.sexp_of_pair = sexp_of_pair;
exports.sexp_of_triple = sexp_of_triple;
exports.sexp_of_list = sexp_of_list;
exports.sexp_of_array = sexp_of_array;
exports.sexp_of_hashtbl = sexp_of_hashtbl;
exports.sexp_of_opaque = sexp_of_opaque;
exports.sexp_of_fun = sexp_of_fun;
exports.Of_sexp_error = Of_sexp_error;
exports.record_check_extra_fields = record_check_extra_fields;
exports.of_sexp_error = of_sexp_error;
exports.of_sexp_error_exn = of_sexp_error_exn;
exports.unit_of_sexp = unit_of_sexp;
exports.bool_of_sexp = bool_of_sexp;
exports.string_of_sexp = string_of_sexp;
exports.bytes_of_sexp = bytes_of_sexp;
exports.char_of_sexp = char_of_sexp;
exports.int_of_sexp = int_of_sexp;
exports.float_of_sexp = float_of_sexp;
exports.int32_of_sexp = int32_of_sexp;
exports.int64_of_sexp = int64_of_sexp;
exports.nativeint_of_sexp = nativeint_of_sexp;
exports.ref_of_sexp = ref_of_sexp;
exports.lazy_t_of_sexp = lazy_t_of_sexp;
exports.option_of_sexp = option_of_sexp;
exports.pair_of_sexp = pair_of_sexp;
exports.triple_of_sexp = triple_of_sexp;
exports.list_of_sexp = list_of_sexp;
exports.array_of_sexp = array_of_sexp;
exports.hashtbl_of_sexp = hashtbl_of_sexp;
exports.opaque_of_sexp = opaque_of_sexp;
exports.fun_of_sexp = fun_of_sexp;
exports.unit_sexp_grammar = unit_sexp_grammar;
exports.bool_sexp_grammar = bool_sexp_grammar;
exports.string_sexp_grammar = string_sexp_grammar;
exports.bytes_sexp_grammar = bytes_sexp_grammar;
exports.char_sexp_grammar = char_sexp_grammar;
exports.int_sexp_grammar = int_sexp_grammar;
exports.float_sexp_grammar = float_sexp_grammar;
exports.int32_sexp_grammar = int32_sexp_grammar;
exports.int64_sexp_grammar = int64_sexp_grammar;
exports.nativeint_sexp_grammar = nativeint_sexp_grammar;
exports.ref_sexp_grammar = ref_sexp_grammar;
exports.lazy_t_sexp_grammar = lazy_t_sexp_grammar;
exports.option_sexp_grammar = option_sexp_grammar;
exports.list_sexp_grammar = list_sexp_grammar;
exports.array_sexp_grammar = array_sexp_grammar;
exports.opaque_sexp_grammar = opaque_sexp_grammar;
exports.fun_sexp_grammar = fun_sexp_grammar;
exports.sexp_of_exn = sexp_of_exn;
exports.printexc_prefer_sexp = printexc_prefer_sexp;
exports.sexp_of_exn_opt = sexp_of_exn_opt;
exports.Exn_converter = Exn_converter;
exports.hash_fold_nativeint = hash_fold_nativeint;
exports.hash_fold_int64 = hash_fold_int64;
exports.hash_fold_int32 = hash_fold_int32;
exports.hash_fold_char = hash_fold_char;
exports.hash_fold_int = hash_fold_int;
exports.hash_fold_bool = hash_fold_bool;
exports.hash_fold_string = hash_fold_string;
exports.hash_fold_float = hash_fold_float;
exports.hash_fold_unit = hash_fold_unit;
exports.hash_fold_option = hash_fold_option;
exports.hash_fold_list = hash_fold_list;
exports.hash_fold_lazy_t = hash_fold_lazy_t;
exports.hash_fold_ref_frozen = hash_fold_ref_frozen;
exports.hash_fold_array_frozen = hash_fold_array_frozen;
exports.hash_nativeint = hash_nativeint;
exports.hash_int64 = hash_int64;
exports.hash_int32 = hash_int32;
exports.hash_char = hash_char;
exports.hash_int = hash_int;
exports.hash_bool = hash_bool;
exports.hash_string = hash_string;
exports.hash_float = hash_float;
exports.hash_unit = hash_unit;
exports.compare_bool = compare_bool;
exports.compare_char = compare_char;
exports.compare_float = compare_float;
exports.compare_int = compare_int;
exports.compare_int32 = compare_int32;
exports.compare_int64 = compare_int64;
exports.compare_nativeint = compare_nativeint;
exports.compare_string = compare_string;
exports.compare_unit = compare_unit;
exports.compare_array = compare_array;
exports.compare_list = compare_list;
exports.compare_option = compare_option;
exports.compare_ref = compare_ref;
exports.equal_bool = equal_bool;
exports.equal_char = equal_char;
exports.equal_float = equal_float;
exports.equal_int = equal_int;
exports.equal_int32 = equal_int32;
exports.equal_int64 = equal_int64;
exports.equal_nativeint = equal_nativeint;
exports.equal_string = equal_string;
exports.equal_unit = equal_unit;
exports.equal_array = equal_array;
exports.equal_list = equal_list;
exports.equal_option = equal_option;
exports.equal_ref = equal_ref;
exports.Not_found_s = Not_found_s;
/* Hash-Base Not a pure module */

// Generated by Melange
'use strict';

var Import$negBase = require("./import.bs.js");
var Identifiable$negBase = require("./identifiable.bs.js");

var hash = Import$negBase.hash_unit;

function compare(param, param$1) {
  return 0;
}

function of_string(param) {
  if (param === "()") {
    return ;
  } else {
    return Import$negBase.failwith("Base.Unit.of_string: () expected");
  }
}

function to_string(param) {
  return "()";
}

var include = Identifiable$negBase.Make({
      compare: compare,
      hash_fold_t: Import$negBase.hash_fold_unit,
      hash: hash,
      t_of_sexp: Import$negBase.unit_of_sexp,
      sexp_of_t: Import$negBase.sexp_of_unit,
      of_string: of_string,
      to_string: to_string,
      module_name: "Base.Unit"
    });

function invariant(param) {
  
}

var all = {
  hd: undefined,
  tl: /* [] */0
};

var t_sexp_grammar = Import$negBase.unit_sexp_grammar;

var hash_fold_t = include.hash_fold_t;

var hash$1 = include.hash;

var t_of_sexp = include.t_of_sexp;

var sexp_of_t = include.sexp_of_t;

var of_string$1 = include.of_string;

var to_string$1 = include.to_string;

var $great$eq = include.$great$eq;

var $less$eq = include.$less$eq;

var $eq = include.$eq;

var $great = include.$great;

var $less = include.$less;

var $less$great = include.$less$great;

var equal = include.equal;

var compare$1 = include.compare;

var min = include.min;

var max = include.max;

var ascending = include.ascending;

var descending = include.descending;

var between = include.between;

var clamp_exn = include.clamp_exn;

var clamp = include.clamp;

var comparator = include.comparator;

var pp = include.pp;

var hashable = include.hashable;

exports.all = all;
exports.t_sexp_grammar = t_sexp_grammar;
exports.hash_fold_t = hash_fold_t;
exports.hash = hash$1;
exports.t_of_sexp = t_of_sexp;
exports.sexp_of_t = sexp_of_t;
exports.of_string = of_string$1;
exports.to_string = to_string$1;
exports.$great$eq = $great$eq;
exports.$less$eq = $less$eq;
exports.$eq = $eq;
exports.$great = $great;
exports.$less = $less;
exports.$less$great = $less$great;
exports.equal = equal;
exports.compare = compare$1;
exports.min = min;
exports.max = max;
exports.ascending = ascending;
exports.descending = descending;
exports.between = between;
exports.clamp_exn = clamp_exn;
exports.clamp = clamp;
exports.comparator = comparator;
exports.pp = pp;
exports.hashable = hashable;
exports.invariant = invariant;
/* include Not a pure module */
